<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Atlantic Breeze</title>
	<subtitle>I am writing about my experiences as a naval navel-gazer.</subtitle>
	
	<link href="https://seankearon.me/feed/feed.xml" rel="self"/>
	<link href="https://seankearon.me/"/>
	<updated>2020-12-07T00:00:00+00:00</updated>
	<id>https://seankearon.me/</id>
	<author>
		<name>Sean Kearon</name>
		<email></email>
	</author>
	
	<entry>
		<title>Long-running business processes in F# with Rebus on Azure</title>
		<link href="https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/"/>
		<updated>2020-12-07T00:00:00+00:00</updated>
		<id>https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/</id>
		<content type="html">&lt;p&gt;This post is part of the &lt;a href=&quot;https://sergeytihon.com/2020/10/22/f-advent-calendar-in-english-2020/&quot;&gt;F# Advent Calendar 2020&lt;/a&gt;.  There is an equivalent post but in C# &lt;a href=&quot;https://seankearon.me/posts/2020/11/rebus-sagas-csharp/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;introduction&quot;&gt;Introduction &lt;a class=&quot;direct-link&quot; href=&quot;#introduction&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This post talks about how to build a system that runs a long-running business process (aka workflow or &amp;quot;saga&amp;quot;) using a .Net library called &lt;a href=&quot;https://github.com/rebus-org/Rebus&quot;&gt;Rebus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rebus is a library that makes it easy to build reliable, distributed systems.  We will show how to host our Rebus system in Azure App Services.  You will also be able to run it by pressing F5 in your IDE.&lt;/p&gt;
&lt;p&gt;We will be implementing a set of fictional, but quite typical business requirements around the onboarding of a new customer.&lt;/p&gt;
&lt;p&gt;So, let&#39;s get started!&lt;/p&gt;
&lt;h1 id=&quot;introducing-rebus&quot;&gt;Introducing Rebus &lt;a class=&quot;direct-link&quot; href=&quot;#introducing-rebus&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Rebus is a distributed, asynchronous and durable .Net Service Bus that is a pleasure to use.  I like to think of Rebus as microservices without the &lt;a href=&quot;https://en.wiktionary.org/wiki/faff&quot;&gt;faff&lt;/a&gt;!  It&#39;s a .Net library uses messages to communicate between parts of your application and can do that reliably by using one of the various options for transporting and sharing those messages.  Rebus can be anywhere your application is (except on mobile and embedded devices afaik).&lt;/p&gt;
&lt;p&gt;I&#39;ve been using Rebus for a long time now.  In my current gig, we are using Rebus in a national medicines optimisation healthcare system that serves around 50 million patients across the UK.  Rebus has helped us simplify and centralise a lot of complex, legacy back end processing and allow us to move the system from on-prem to the cloud.&lt;/p&gt;
&lt;p&gt;As a &amp;quot;message-based architecture&amp;quot;, Rebus is similar to other .Net Service Buses such as NServiceBus, Mass Transit or EasyNetQ.  Like these other service buses, Rebus uses a push model where it reacts to incoming messages.  This is distinct to streaming approaches such as used by Kafka, etc.&lt;/p&gt;
&lt;p&gt;Rebus is open source (MIT), completely free to use and has around 1.4K GitHub stars.  It is Danish software and the founder and primary maintainer is Mogens Heller Grabe (&lt;a href=&quot;https://twitter.com/mookid8000&quot;&gt;@mookid8000&lt;/a&gt;).  Mogens runs a company that provides consultancy, support and some rather excellent monitoring software for use with Rebus (more details here: &lt;a href=&quot;https://rebus.fm/services/&quot;&gt;https://rebus.fm/services/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Thanks to Mogens for kindly reviewing the content of this post.&lt;/p&gt;
&lt;h1 id=&quot;what-good-things-does-rebus-bring-us%3F&quot;&gt;What good things does Rebus bring us? &lt;a class=&quot;direct-link&quot; href=&quot;#what-good-things-does-rebus-bring-us%3F&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Rebus brings high levels of reliability to your system.  Each message will either be processed or sent to an error queue so that you can fix the problem and replay it later.&lt;/p&gt;
&lt;p&gt;Rebus naturally breaks your system down into small chunks of functionality called handlers that are easy to write, reason about and test.  I find working with Rebus to be a very good developer experience (and the error messages are really useful too!).&lt;/p&gt;
&lt;p&gt;One or more handlers can respond to and process messages, which makes it very easy to extend your system without changing existing code.  Different handlers that process the same message do not need to be in the same application component.  This makes it easy to architect your application in a manner that supports your performance, scaling and security needs.&lt;/p&gt;
&lt;p&gt;Rebus can use various technologies to store messages that are being processed.  These are called &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Transport&quot;&gt;message transports&lt;/a&gt; and include RabbitMQ, Azure Service Bus, Amazon SQS and various databases.  There are also transports that use the file system or in-memory.  Rebus relies on the transport to provide durability and reliability, so you probably don&#39;t want to use the in-memory transport when you care about losing messages!  If Rebus can&#39;t process a message then it can retry that processing either in using a &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Automatic-retries-and-error-handling#customizing-retries&quot;&gt;simple approach&lt;/a&gt;, using a &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Back-off-strategy&quot;&gt;back-off strategy&lt;/a&gt; and you can also add a &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Automatic-retries-and-error-handling#second-level-retries&quot;&gt;second layer of processing&lt;/a&gt; for a more comprehensive approach to handling failures.&lt;/p&gt;
&lt;p&gt;Ultimately, if the message can&#39;t be processed for whatever reason, then Rebus will keep it for you in the part of the transport that you nominate as the error queue when you configure Rebus.  As well as the message, Rebus also stores the details of the failures in the message&#39;s headers so that you can easily see what went wrong and fix it.  When you&#39;ve put the database server&#39;s plug back into the wall, or fixed the cause of the failure in some other way, you can move the message back to the processing queue so that processing can begin again!&lt;/p&gt;
&lt;p&gt;There are plenty of other good things in Rebus that we don&#39;t have time to talk about here, such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Data-bus&quot;&gt;Transporting larger data using the Data Bus&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Workers-and-parallelism&quot;&gt;Controlling the number of workers and parallelism&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Wire-level-format-of-messages&quot;&gt;Controlling how Rebus serialises messages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Message-compression-and-encryption&quot;&gt;Compressing and encrypting the contents of messages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you&#39;d expect, there is superb support for &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Testing&quot;&gt;testing too&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Check out the official wiki here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki&quot;&gt;https://github.com/rebus-org/Rebus/wiki&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;overview-of-our-scenario&quot;&gt;Overview of our scenario &lt;a class=&quot;direct-link&quot; href=&quot;#overview-of-our-scenario&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We are going to jump into Rebus a little beyond the basics of request/reply or pub/sub and look at how to model long-running, durable workflows (aka sagas) in Rebus.  We are going to use Rebus to build an application that processes new customers for a hypothetical business and then host that in an Azure App Service.  You could also run the same code as a Windows Service if you wanted and it will run just the same in your IDE when you press F5 (or whatever you press to run your shizzle!).&lt;/p&gt;
&lt;p&gt;We&#39;re going to add a few requirements into our made-up business scenario, just so that we can showcase some of Rebus&#39; features.  Let&#39;s take a look at the business requirements.&lt;/p&gt;
&lt;p&gt;We&#39;re going to model a business process that is under an &lt;a href=&quot;https://en.wikipedia.org/wiki/Operational-level_agreement&quot;&gt;OLA&lt;/a&gt; and which has compensating actions that must be taken if the requirements in the OLA are not met.&lt;/p&gt;
&lt;p&gt;The business wants us to build a system to handle the onboarding of new customers.  As well as functional requirements, the business also have operational requirements so that they can meet their &lt;a href=&quot;https://en.wikipedia.org/wiki/Operational-level_agreement&quot;&gt;operational level agreements (OLA)&lt;/a&gt;.  When a new customer is taken on, the business wants the following to happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An account is to be created for the customer.&lt;/li&gt;
&lt;li&gt;A welcome email is to be sent to the customer after the account is created.&lt;/li&gt;
&lt;li&gt;A sales call is scheduled in the CRM after the account has been created.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The business has an OLA in place that stipulates that new customers must be processed within a given time.  So that they can meet their OLA requirements, they want our workflow to complete within 10 minutes of the customer being taken on.  If the workflow does not complete within 10 minutes, the business wants the following to happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any placed sales call is to be cancelled.&lt;/li&gt;
&lt;li&gt;The service desk takes over the process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Great - we know what they want.  So, let&#39;s start building it!&lt;/p&gt;
&lt;h1 id=&quot;our-architecture&quot;&gt;Our architecture &lt;a class=&quot;direct-link&quot; href=&quot;#our-architecture&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Our architecture is very simple.  This is what is looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/customer-onboarding-architecture.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;There is a web API that serves as an entry point to let us know about the new customer.  There is a back end processing system that does all our processing.  There is also a CRM and a customer database.&lt;/p&gt;
&lt;p&gt;We are going to build the entry point API and the back end processing system.  We are going to pretend that the CRM and the database exist.&lt;/p&gt;
&lt;p&gt;Rebus will be used in the web API and the back end processing system.&lt;/p&gt;
&lt;h1 id=&quot;setting-up-the-projects&quot;&gt;Setting up the projects &lt;a class=&quot;direct-link&quot; href=&quot;#setting-up-the-projects&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We&#39;re going to be using .Net 5, and I&#39;ll be using JetBrains Rider, but you can use your IDE of choice!  We&#39;re going to build everything so that it runs on our local machines and then migrate it to the Cloud later.  You can find the code in GitHub here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/seankearon/rebus-onboardingcs.git&quot;&gt;https://github.com/seankearon/rebus-onboardingcs.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So that you can skip ahead, there are branches that have the outcomes of the stages as mentioned below.&lt;/p&gt;
&lt;p&gt;The basic setup is to create a project for our Web API and a Console App project for our back end processor.  We&#39;ll call these EntryPointAPI and OnboardingProcessor respectively.  We&#39;ll see later how to run this locally, in an Azure App Service or a Windows Service.&lt;/p&gt;
&lt;p&gt;Then we add the &lt;a href=&quot;https://www.nuget.org/packages/Rebus&quot;&gt;Rebus&lt;/a&gt; and &lt;a href=&quot;https://www.nuget.org/packages/Rebus.ServiceProvider&quot;&gt;Rebus.ServiceProvider&lt;/a&gt; NuGet packages to each project, giving us something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/1-basic-project-cs.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This stage is available on the branch &lt;em&gt;1-basic-project-setup&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id=&quot;defining-our-messages&quot;&gt;Defining our messages &lt;a class=&quot;direct-link&quot; href=&quot;#defining-our-messages&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;So, now we have a couple of projects waiting for some code, we need to think about what we&#39;re going to build!  In a message-based system, a good place to start is designing your messages.&lt;/p&gt;
&lt;p&gt;In Rebus, you model your messages as &lt;a href=&quot;https://en.wikipedia.org/wiki/Plain_old_CLR_object&quot;&gt;POCOs&lt;/a&gt;.  Messages will be used by different parts of our system, so we&#39;ll put them into a shared assembly.  Messages should also be small and immutable.  (Rebus does allow mutating a message but, as processing is asynchronous, it&#39;s not a good idea as it can lead to unpredictable behaviour.  If you find you need to change the message state during processing then look at using another message to model the state changes.)&lt;/p&gt;
&lt;h2 id=&quot;events-and-commands&quot;&gt;Events and commands &lt;a class=&quot;direct-link&quot; href=&quot;#events-and-commands&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we look at our requirements and start building our messages, let&#39;s take a moment to look at two types of messages.&lt;/p&gt;
&lt;p&gt;Messages split into two broad categories: events and commands.  These correspond to the general meaning of the words with an event being a general notification that something has occurred (i.e. in the past) and a command is a when you tell a component to do something.&lt;/p&gt;
&lt;p&gt;To send a command in Rebus you use either &lt;code&gt;IBus.Send()&lt;/code&gt; or &lt;code&gt;IBus.SendLocal()&lt;/code&gt; to send the message to a specific queue.  The difference between those calls is that with &lt;code&gt;IBus.Send()&lt;/code&gt; you need to use Rebus&#39; routing to tell Rebus where to send the message, but &lt;code&gt;IBus.SendLocal()&lt;/code&gt; always sends the message to the current endpoint&#39;s queue.&lt;/p&gt;
&lt;h2 id=&quot;our-first-set-of-messages&quot;&gt;Our first set of messages &lt;a class=&quot;direct-link&quot; href=&quot;#our-first-set-of-messages&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s leave the OLA requirements to one side for now and look at our main requirements.  These say that when a customer is onboarded that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An account is to be created for the customer.&lt;/li&gt;
&lt;li&gt;A welcome email is to be sent to the customer after the account is created.&lt;/li&gt;
&lt;li&gt;A sales call is scheduled in the CRM after the account has been created.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, if we were sitting in a room together and someone was telling us what to do, they&#39;d probably say something like this:&lt;/p&gt;
&lt;p&gt;&amp;quot;Create an account for Sean.&amp;quot;&lt;br&gt;
&amp;quot;Account created for Sean.&amp;quot;&lt;br&gt;
&amp;quot;Send a welcome email to Sean.&amp;quot;&lt;br&gt;
&amp;quot;Schedule a sales call with Sean.&amp;quot;&lt;br&gt;
&amp;quot;Welcome email sent to Sean&amp;quot;&lt;br&gt;
&amp;quot;Sales call scheduled with to Sean&amp;quot;&lt;/p&gt;
&lt;p&gt;Someone is listening and ticks off what has been done.  If the process doesn&#39;t finish in time then they tell everyone to stop.  Check if the sales call should be cancelled and tell the service desk to take over.&lt;/p&gt;
&lt;p&gt;So, that looks like three commands and an event to me!  As it&#39;s good for messages to be immutable, let&#39;s use F# records to implement our messages, which gives us:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardNewCustomer&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        Name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;string&lt;/span&gt;&lt;br&gt;        Email&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;string&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CreateCustomerAccount&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        Name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;string&lt;/span&gt;&lt;br&gt;        Email&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;string&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CustomerAccountCreated&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        Email&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;string&lt;/span&gt;&lt;br&gt;        CustomerId&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;int&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SendWelcomeEmail&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        CustomerId&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;int&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WelcomeEmailSent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        CustomerId&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;int&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScheduleSaleCall&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        CustomerId&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;int&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SaleCallScheduled&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        CustomerId&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;int&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generally, you will want your messages to contain as little information as possible.  After the customer has been created, we then use the ID of the customer.  We use the &lt;code&gt;CustomerAccountCreated&lt;/code&gt; message to let us know what ID the new customer has been assigned.  We will see how that is used later.&lt;/p&gt;
&lt;p&gt;This stage is available on the branch &lt;em&gt;2-main-messages-added&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;creating-the-web-api-entry-point&quot;&gt;Creating the web API entry point &lt;a class=&quot;direct-link&quot; href=&quot;#creating-the-web-api-entry-point&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The next job is to make our web API tell the backend about any new customers.  We&#39;ll just add a simple route to allow posting of a name and email.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;POST /newcustomer?name=my name&amp;amp;email=me@my.email&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we receive such a &lt;code&gt;POST&lt;/code&gt; request then we will start the onboarding process by sending a &lt;code&gt;CreateCustomerAccount&lt;/code&gt; message to the bus and respond with a &lt;code&gt;200 OK&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token annotation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;token annotation-content&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;newcustomer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token annotation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NewCustomer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;For name email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To do this, we need to set up Rebus in our web API.  There are two basic modes of operation for Rebus &amp;quot;out of the box&amp;quot;: normal and one-way client.  The one-way client mode &amp;quot;does what it says on the tin&amp;quot; and allows you to send messages from a component.  In normal mode, Rebus can send and receive messages.  You can read more about those &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Different-bus-modes&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are going to set up Rebus inside our .Net 5 web API and inject an instance of the Rebus &lt;code&gt;IBus&lt;/code&gt; into our controller.  Remember, at this stage, we are just using the file system as our transport and will be adding Azure later.  In time-honoured fashion, let&#39;s use an extension method to configure and register an &lt;code&gt;IBus&lt;/code&gt; instance and then inject that into our controller.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;Startup.cs&lt;/code&gt; we will add one call to our configure services method:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;services&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IServiceCollection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;        services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddControllers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;        services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddRebus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Lib&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;configure&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In our controller we add a constructor parameter for the &lt;code&gt;IBus&lt;/code&gt; so that it will be injected into the instance.  Our controller method can then send the message to the bus, making our controller class look like this:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; EntryPointAPI&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Controllers&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AspNetCore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Mvc&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; Rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Bus&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; FSharp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Control&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Tasks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;V2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ContextInsensitive&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; OnboardingMessages&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token annotation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApiController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CustomerController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bus &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ControllerBase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; _bus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bus&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token annotation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;token annotation-content&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;newcustomer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token annotation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NewCustomer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;For name email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Aside 1:&lt;/strong&gt; I like to add static helpers to my records where it improves readability.  In the above controller, I can easily see that I&#39;m onboarding a new customer.  YMMV!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside 2:&lt;/strong&gt; We&#39;re using the task builder from the &lt;a href=&quot;https://www.nuget.org/packages/TaskBuilder.fs&quot;&gt;TaskBuilder NuGet package&lt;/a&gt; to allow our controller method to return a &lt;code&gt;System.Threading.Tasks.Task&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pretty simple, right?  All that remains now is to look at the Rebus configuration in our &lt;code&gt;Lib.configure&lt;/code&gt; function.  This looks like:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; Lib &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; Rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Config&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; OnboardingMessages&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; Rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Retry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Simple&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; Rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Routing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TypeBased&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; Rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FileSystem&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; configure &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rebus&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RebusConfigurer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;           rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Logging   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; l &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                                                  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore &lt;span class=&quot;token comment&quot;&gt;// A&lt;/span&gt;&lt;br&gt;           rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Routing   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TypeBased&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Map&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MainQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore &lt;span class=&quot;token comment&quot;&gt;// B&lt;/span&gt;&lt;br&gt;           rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Transport &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseFileSystemAsOneWayClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c:/rebus-advent&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore &lt;span class=&quot;token comment&quot;&gt;// C&lt;/span&gt;&lt;br&gt;           rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Options   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SimpleRetryStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;errorQueueAddress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ErrorQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore &lt;span class=&quot;token comment&quot;&gt;// D&lt;/span&gt;&lt;br&gt;           rebus&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, in our configuration we do the following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; We tell Rebus to log to the console.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;B:&lt;/strong&gt; We tell Rebus where to send the &lt;code&gt;OnboardNewCustomer&lt;/code&gt; messages.  In Rebus, messages go to &amp;quot;queues&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C:&lt;/strong&gt; we tell Rebus to use the file system to transport messages, and we tell Rebus that we will only ever be sending messages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D:&lt;/strong&gt; we tell Rebus to retry any failures (the default is 5 times, but you can set that as you wish) and to send messages that are still failing log to the queue called &amp;quot;ErrorQueue&amp;quot;.&lt;/p&gt;
&lt;p&gt;This configuration will change a little later when we use Azure ServiceBus as our message transport.  But, we&#39;re now ready to start sending messages.  Woohoo!&lt;/p&gt;
&lt;p&gt;The code at this point is available in the branch &lt;code&gt;3-entry-point-api-working&lt;/code&gt;.  Go and run that, crank up your favourite HTTP tool and send the following to your new API (don&#39;t forget to add the host!):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;POST /newcustomer?name=Sean&amp;amp;email=sean@my.email&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; If you&#39;re using Rider, you can run the line above from  &lt;a href=&quot;https://www.jetbrains.com/help/rider/Http_client_in__product__code_editor.html&quot;&gt;Rider&#39;s built-in HTTP client&lt;/a&gt;.  How cool is that? :)&lt;/p&gt;
&lt;p&gt;Then you will see a file has appeared in &lt;code&gt;c:/rebus-advent/MainQueue&lt;/code&gt;.  We can just open that up to see that a message in Rebus consists of a set of headers and a body:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;Headers&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-intent&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;p2p&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-msg-id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;323e07bb-4dd2-43b4-af5d-9c5749742cd7&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-senttime&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2020-11-10T11:17:26.1492853+00:00&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-msg-type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;OnboardingMessages.OnboardNewCustomer, OnboardingMessages&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-corr-id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;323e07bb-4dd2-43b4-af5d-9c5749742cd7&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-corr-seq&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-content-type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;application/json;charset=utf-8&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;Body&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eyIkdHlwZSI6Ik9uYm9hcmRpbmdNZXNzYWdlcy5PbmJvYXJkTmV3Q3VzdG9tZXIsIE9uYm9hcmRpbmdNZXNzYWdlcyIsIk5hbWUiOiJTZWFuIiwiRW1haWwiOiJzZWFuQG15LmVtYWlsIn0=&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The body is Base64 encoded JSON that is our serialised message:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;$type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;OnboardingMessages.OnboardNewCustomer, OnboardingMessages&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Sean&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;Email&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sean@my.email&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;a-quick-review&quot;&gt;A quick review &lt;a class=&quot;direct-link&quot; href=&quot;#a-quick-review&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;So, to add Rebus to our normal .Net Web API project we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defined our messages.&lt;/li&gt;
&lt;li&gt;Added around 4 lines of configuration.&lt;/li&gt;
&lt;li&gt;Registered Rebus into .Net 5&#39;s DI.&lt;/li&gt;
&lt;li&gt;Sent the message into our bus directly from our controller method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the reliability and durability that Rebus&#39; brings, any client that calls our &lt;code&gt;/newcustomer&lt;/code&gt; API and receives a &lt;code&gt;200 OK&lt;/code&gt; knows that the onboarding process has now started and that it will be processed as expected.&lt;/p&gt;
&lt;p&gt;That&#39;s a good start!  Let&#39;s move on to creating the back end of our system that is going to process the messages from the API.&lt;/p&gt;
&lt;h1 id=&quot;creating-the-back-end&quot;&gt;Creating the back end &lt;a class=&quot;direct-link&quot; href=&quot;#creating-the-back-end&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The way we set up Rebus in the back end is going to be very similar to how we did that in the API.  There are some essential differences that we will focus on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The back end needs to send &lt;em&gt;and&lt;/em&gt; receive messages.&lt;/li&gt;
&lt;li&gt;The back end will be performing a long-running, durable workflow/saga.&lt;/li&gt;
&lt;li&gt;We want to be able to host the back end in an Azure App Service, as well as run it locally (and, possibly, in a Windows Service).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;configuring-rebus-for-send-and-receive&quot;&gt;Configuring Rebus for send and receive &lt;a class=&quot;direct-link&quot; href=&quot;#configuring-rebus-for-send-and-receive&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next we are going to use a library called &lt;a href=&quot;https://github.com/rebus-org/Topper&quot;&gt;Topper&lt;/a&gt; form the creator of rebus, Mogens (here&#39;s &lt;a href=&quot;https://rebus.fm/2019/01/29/generic-host/&quot;&gt;Mogens&#39; blog&lt;/a&gt; introducing Topper.  Under the hood, Topper uses the venerable &lt;a href=&quot;http://topshelf-project.com/&quot;&gt;Topshelf library&lt;/a&gt; and requires us to implement our back end as an &lt;code&gt;IDisposable&lt;/code&gt; wrapper and run it inside a Console application project.&lt;/p&gt;
&lt;p&gt;I&#39;m going to sprinkle in a little bit of &lt;a href=&quot;https://github.com/serilog/serilog&quot;&gt;Serilog&lt;/a&gt; too, just for fun.  Our entry point will look like the following:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; System&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; OnboardingProcessor&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; Serilog&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; Topper&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token annotation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EntryPoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; main _ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Logger &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;LoggerConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WriteTo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CreateLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; configuration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ServiceConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;OurBackendBus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Backend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IDisposable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    ServiceHost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;configuration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That all we need to do to set up for running locally or in Azure.  We can also create and run it as a Windows Service just by calling the executable using the parameter &lt;code&gt;install&lt;/code&gt; (use &lt;code&gt;uninstall&lt;/code&gt; to remove the service).  Very cool!&lt;/p&gt;
&lt;p&gt;The rest of the magic all happens in our &lt;code&gt;Backend&lt;/code&gt; class.  Let&#39;s take a look at that.&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Backend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;mutable&lt;/span&gt; provider&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ServiceProvider&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;mutable&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; services &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ServiceCollection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AddRebus configureRebus &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;        services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AutoRegisterHandlersFromAssemblyOf&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Backend&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;&lt;br&gt;        provider &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;BuildServiceProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        provider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseRebus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Action&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;IBus&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; bus &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IDisposable&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            printfn &lt;span class=&quot;token string&quot;&gt;&quot;Disposing - tchau!&quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; bus &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; provider &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; provider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Bus &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; IBus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bus&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like before, we&#39;ve put the configuration spell into a separate function, which looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; configureRebus &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rebus&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RebusConfigurer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Logging       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; l &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Serilog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                                                            &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Routing       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TypeBased&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MapAssemblyOf&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MainQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Transport     &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseFileSystem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c:/rebus-advent&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MainQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;              &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Options       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SimpleRetryStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;errorQueueAddress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ErrorQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Sagas         &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseFilesystem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c:/rebus-advent/sagas&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                               &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is very similar to the previous one, but we are not using the &lt;code&gt;*AsOneWayClient&lt;/code&gt; flavours of the configuration methods.  We are going to be dealing with more than one message in our back end, so the routing maps all messages from the assembly to our &lt;code&gt;MainQueue&lt;/code&gt;.  The file system transport is two-way and therefore needs to know which queue to work against - that&#39;s &lt;code&gt;MainQueue&lt;/code&gt; again.  Lastly, we&#39;ve got a new configuration item to set us up ready for our sagas later on.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;Backend&lt;/code&gt; ctor there is one new line that we haven&#39;t seen before now: &lt;code&gt;services.AutoRegisterHandlersFromAssemblyOf&amp;lt;Backend&amp;gt;() |&amp;gt; ignore&lt;/code&gt;.  This tells Rebus to scan the assembly to find and register handlers, which in Rebus are types that will process messages.  You can now test that the lovely new backend is working by adding a handler for the &lt;code&gt;OnboardNewCustomer&lt;/code&gt; message, as follows:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DummyHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardNewCustomer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    failwith &lt;span class=&quot;token string&quot;&gt;&quot;This is just a dummy handler!&quot;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that we&#39;re using &lt;code&gt;TaskBuilder&lt;/code&gt; in our handler here again.  This will return a &lt;code&gt;Task&amp;lt;Unit&amp;gt;&lt;/code&gt; which we cast back to &lt;code&gt;Task&lt;/code&gt; so that everybody is happy.&lt;/p&gt;
&lt;p&gt;If you have a message waiting in the queue from before, then this will be found and Rebus will pass it to the handler above and can break in your IDE to see that the data from our earlier message is passed into our handler.  If you don&#39;t have a message waiting, just use the API to send one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/fs-break-in-handler.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can also see the logging output in the console:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/rebus-console-output.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you allow the program to run, you&#39;ll see in the console that Rebus will retry the message 5 times - getting our &lt;code&gt;NotImplementedException&lt;/code&gt; each time, and then the message is moved to our &lt;code&gt;ErrorQueue&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/message-in-error-queue-filesystem.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Just drag it back to the &lt;code&gt;MainQueue&lt;/code&gt; to start processing again!&lt;/p&gt;
&lt;p&gt;You can find the code at this point on the branch &lt;code&gt;4-back-end-configuration&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt;  Did you see what happened there?  Our system didn&#39;t stop working just because the back end component was down (okay, not even written yet!!).  The message stayed in the queue and waited until there was something to process it.  That&#39;s a nice example of how using Rebus increases the reliability of your system.&lt;/p&gt;
&lt;h2 id=&quot;creating-the-saga&quot;&gt;Creating the saga &lt;a class=&quot;direct-link&quot; href=&quot;#creating-the-saga&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Okay, we&#39;re ready now to create our saga, the code that will run our workflow.  Rebus models sagas by implementing two connected classes.  One that holds any state that changes throughout the workflow, and one that is responsible for coordinating the work done throughout the long-running process.  This is what the basic structures look like:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardingSagaData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ISagaData&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; set &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; value&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Revision&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Revision&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; set &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Revision &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; value&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; Id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Guid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Empty &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; Revision &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardingSaga&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Saga&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CorrelateMessages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICorrelationConfig&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IAmInitiatedBy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardNewCustomer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; Why are we messing around with the getters and setters for the &lt;code&gt;Id&lt;/code&gt; and &lt;code&gt;Revision&lt;/code&gt; properties in &lt;code&gt;OnboardingSagaData&lt;/code&gt;?  Well, by default, Rebus serialises to JSON (although you can choose another format, such as Protobuf and other (see &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Serialization&quot;&gt;here&lt;/a&gt; for more details)).   In F#, all interfaces are explicit and so, to ensure that the JSON serialiser picks up the saga data&#39;s &lt;code&gt;Id&lt;/code&gt; and &lt;code&gt;Revision&lt;/code&gt; properties, we need to add some additional code so that we can see those properties from the interface and from a plain instance.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;OnboardingSagaData&lt;/code&gt; class needs the &lt;code&gt;Id&lt;/code&gt; and &lt;code&gt;Revision&lt;/code&gt; properties so that Rebus can control concurrent access to the saga&#39;s state for us.&lt;/p&gt;
&lt;p&gt;Each time a customer is onboarded, there will be a saga instance that is responsible for controlling the onboarding workflow for that customer.  The &lt;code&gt;CorrelateMessages&lt;/code&gt; method in the  &lt;code&gt;OnboardingSaga&lt;/code&gt; class is used by Rebus to find the saga instance that relates to a particular message.&lt;/p&gt;
&lt;p&gt;We tell Rebus when to start a new saga by adding the interface &lt;code&gt;IAmInitiatedBy&amp;lt;OnboardNewCustomer&amp;gt;&lt;/code&gt;.  Soon, we will add other messages that will be processed by the saga by using the &lt;code&gt;IHandleMessages&amp;lt;T&amp;gt;&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;Let&#39;s push on and see how this is implemented for the full workflow (except the OLA requirements).&lt;/p&gt;
&lt;p&gt;We need to track what&#39;s going on in our workflow.  We do that by adding state to the &lt;code&gt;ISagaData&lt;/code&gt; implementation.  We&#39;re going to keep hold of the name, email and the new account id and we also want to track what actions have happened.   I&#39;ve added the &lt;code&gt;IsComplete&lt;/code&gt; helper property that we&#39;ll use in the saga.&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardingSagaData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ISagaData&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; set &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; value&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Revision&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Revision&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; set &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Revision &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; value&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; Id       &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Guid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Empty &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; Revision &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; CustomerName  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; CustomerEmail &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; AccountId     &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; AccountCreated     &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; WelcomeEmailSent   &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; SalesCallScheduled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Completed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountCreated &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WelcomeEmailSent &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SalesCallScheduled&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We update the state from inside the handlers in our saga (Rebus makes the saga&#39;s data available via the instance&#39;s &lt;code&gt;Data&lt;/code&gt; property).  For example, when we get a confirmation that the welcome email has been sent:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IAmInitiatedBy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;WelcomeEmailSent&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WelcomeEmailSent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WelcomeEmailSent &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the exit of each handler method, we call &lt;code&gt;TryComplete()&lt;/code&gt;.  This method checks to see that we&#39;ve done everything we want to do and, if so, we call the Rebus&#39; &lt;code&gt;MarkAsComplete()&lt;/code&gt; method.   Rebus will then remove clean up and remove the saga&#39;s state for us.  We call this every time as Rebus, being distributed and asynchronous, may have finished up the saga in the blink of an eye!  (Okay, we probably don&#39;t need to call it at the end of the initiating method, but I like to do that for consistency!)  This is our &lt;code&gt;TryComplete()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Completed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;MarkAsComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rebus needs to know how to find the saga state for our particular workflow, and we have updated the &lt;code&gt;CorrelateMessages&lt;/code&gt; method with the necessary code to let Rebus do just that:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CorrelateMessages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICorrelationConfig&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Correlate&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     obj&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email     &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CustomerEmail&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Correlate&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;CustomerAccountCreated&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;CustomerAccountCreated&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email     &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CustomerEmail&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Correlate&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;WelcomeEmailSent&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;WelcomeEmailSent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;       obj&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Correlate&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SalesCallScheduled&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SalesCallScheduled&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     obj&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration allows you to correlate a property value in each message handled by the saga with a value in the saga&#39;s state.  You just need to make sure Rebus can uniquely identify the saga from these values and then sit back and let Rebus do all the finding for you!  We&#39;re using the email and the account ID when it&#39;s known.  Note that you need to supply a correlation for Rebus to identify all messages to which the saga responds, including the message that initiates the saga.&lt;/p&gt;
&lt;p&gt;In the above, we&#39;re using F# 5#s &lt;code&gt;nameof&lt;/code&gt; to get the names of the properties for our correlation:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; AccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnboardingSagaData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    nameof x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a little boilerplate involved here, the reasons being outlined [here](// &lt;a href=&quot;https://github.com/fsharp/fslang-design/blob/master/preview/FS-1003-nameof-operator.md#names-of-instance-members&quot;&gt;https://github.com/fsharp/fslang-design/blob/master/preview/FS-1003-nameof-operator.md#names-of-instance-members&lt;/a&gt;).  Also, to get &lt;code&gt;nameof&lt;/code&gt; working, I had to set &lt;code&gt;&amp;lt;LangVersion&amp;gt;preview&amp;lt;/LangVersion&amp;gt;&lt;/code&gt; in the project file.&lt;/p&gt;
&lt;p&gt;All that remains is to do some work inside the saga.  Generally, I like to keep my sagas pretty &amp;quot;slim&amp;quot; and make them responsible for coordinating the flow of work.  I tend to pass off work to other handlers by sending messages out from the saga.  Here&#39;s how that looks in the saga&#39;s initiating handler:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IAmInitiatedBy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardNewCustomer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsNew &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;            this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerName  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;br&gt;            this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerEmail &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;br&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;CreateCustomerAccount&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;For m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;            this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the first line, we check that the saga hasn&#39;t already been created by another process and abandon if so.  Then, after setting some state, we use the Rebus &lt;code&gt;IBus&lt;/code&gt; instance has been injected into our saga to send a command message to create an account for the customer details we have been given.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;do! bus.Send(CreateCustomerAccount.For m.Name m.Email)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As our requirements say that everything else should happen &lt;em&gt;after&lt;/em&gt; the account has been created, that&#39;s all we need to do there.&lt;/p&gt;
&lt;p&gt;The full code looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardingSagaData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ISagaData&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; set &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; value&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Revision&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Revision&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; set &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Revision &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; value&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; Id       &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Guid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Empty &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; Revision &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; CustomerName  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; CustomerEmail &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; AccountId     &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; AccountCreated     &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; WelcomeEmailSent   &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; SalesCallScheduled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Completed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountCreated &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WelcomeEmailSent &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SalesCallScheduled&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; CustomerEmail &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// https://github.com/fsharp/fslang-design/blob/master/preview/FS-1003-nameof-operator.md#names-of-instance-membersabove&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnboardingSagaData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    nameof x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerEmail&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; AccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnboardingSagaData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    nameof x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardingSaga&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Saga&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; bus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CorrelateMessages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICorrelationConfig&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;        config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Correlate&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     obj&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email     &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CustomerEmail&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Correlate&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;CustomerAccountCreated&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;CustomerAccountCreated&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email     &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CustomerEmail&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Correlate&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;WelcomeEmailSent&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;WelcomeEmailSent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;       obj&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Correlate&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SalesCallScheduled&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SalesCallScheduled&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     obj&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Completed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;MarkAsComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// This is to allow access to IsNew from inside the interface sections below.&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsNew &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsNew&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IAmInitiatedBy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardNewCustomer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsNew &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;                this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerName  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;br&gt;                this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerEmail &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;br&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;CreateCustomerAccount&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;For m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;                this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IAmInitiatedBy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;CustomerAccountCreated&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CustomerAccountCreated&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;br&gt;                this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountCreated &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;br&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; SendWelcomeEmail&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;For  m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; ScheduleSalesCall&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;For m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;                this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IAmInitiatedBy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;WelcomeEmailSent&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WelcomeEmailSent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WelcomeEmailSent &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;br&gt;                this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IAmInitiatedBy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SalesCallScheduled&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SalesCallScheduled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SalesCallScheduled &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;br&gt;                this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code at this stage is available in the branch &lt;code&gt;5-saga-receives-messages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you check that out, run it and start the saga by posting to our API, then the message will fail and be placed in the error queue after be retried only once.  If you open up the message, you&#39;ll see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/failed-message-with-error-in-header.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Look inside the &lt;code&gt;rbs2-error-details&lt;/code&gt; header and you will see that Rebus has stored the exception details in there for use.  They tell us this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Message with ID db52a43d-a6bc-4a9d-a6c3-3d4a324fcaba
and type OnboardingMessages.CreateCustomerAccount, OnboardingMessages
could not be dispatched to any handlers
(and will not be retried under the default fail-fast settings)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This lovely, helpful error shows what Rebus puts messages onto the error queue if it cannot find any handlers to process it.  The &amp;quot;fail-fast&amp;quot; part is Rebus&#39; built-in mechanism to skip retries when you are sure there is no point.&lt;/p&gt;
&lt;h2 id=&quot;creating-the-remaining-handlers&quot;&gt;Creating the remaining handlers &lt;a class=&quot;direct-link&quot; href=&quot;#creating-the-remaining-handlers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In a real-world application, you might choose to create another Rebus endpoint for one or more of the handlers we are going to create.  This could be because you want to deploy it separately for performance or other reasons.  Rebus makes it easy to structure your application how you want.  For us, we&#39;re going to put them all into the single endpoint - that&#39;s fine too! :)&lt;/p&gt;
&lt;p&gt;We need handlers that do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a customer account.&lt;/li&gt;
&lt;li&gt;Send a welcome email.&lt;/li&gt;
&lt;li&gt;Schedule a sales call.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we saw briefly above with our &lt;code&gt;DummyHandler&lt;/code&gt;, a handler is just a class that implements the &lt;code&gt;IHandleMessages&amp;lt;T&amp;gt;&lt;/code&gt; interface.  So, we need the following handlers:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CreateCustomerAccountHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; bus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;CreateCustomerAccount&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CreateCustomerAccount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Pretend we&#39;re doing something!&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;CustomerAccountCreated&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;For m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SendWelcomeEmailHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; bus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SendWelcomeEmail&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SendWelcomeEmail&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Pretend we&#39;re doing something!&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;WelcomeEmailSent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;For m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScheduleSalesCallHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; bus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ScheduleSalesCall&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScheduleSalesCall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Pretend we&#39;re doing something!&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SalesCallScheduled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;For m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The fact that we included the line &lt;code&gt;services.AutoRegisterHandlersFromAssemblyOf&amp;lt;Backend&amp;gt;()&lt;/code&gt; in our Rebus setup means that we can put those handlers anywhere in our back end project.  Rebus will find them and set them up so that they are ready to use.&lt;/p&gt;
&lt;p&gt;You will notice that each handler notifies the saga that it was completed, sometimes passing back new information - such as the account ID.  It&#39;s perfectly possible to use the &lt;code&gt;IBus.Send*()&lt;/code&gt; methods to do that.  But, I&#39;m using  &lt;code&gt;IBus.Reply()&lt;/code&gt; which replies to the Rebus endpoint/queue that the message came from.  That is a nice way to avoid having to think about whether I&#39;ve configured the routing for that message!&lt;/p&gt;
&lt;p&gt;One of the joys of developing against the file system transport is that you can easily look into what Rebus is doing.  Just put a breakpoint in one of your handlers, use the API to start the onboarding process and you&#39;ll see the messages and saga state being updated on disk as you step through.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/saga-in-action-filesystem.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Congratulations!  If you&#39;ve followed this far, you now have a long-running, durable workflow implemented in Rebus!&lt;/p&gt;
&lt;p&gt;You can get this code at this point from the branch &lt;code&gt;6-saga-processes-messages&lt;/code&gt;.  I&#39;ve added some logging to that so that you can watch things happening from the console too, so you should see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/saga-logging-output.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; There are two versions of this post - one using C# and one using F#.  Just for fun, why not try running the API from the &lt;a href=&quot;https://github.com/seankearon/rebus-onboardingcs&quot;&gt;C# project&lt;/a&gt; and the backend from the &lt;a href=&quot;https://github.com/seankearon/rebus-onboardingfs&quot;&gt;F# project&lt;/a&gt;?  As long as you&#39;re using the same transport (at this stage that&#39;s a file system in &lt;code&gt;c:\rebus-advent&lt;/code&gt;) then everything will work just fine.  How lovely is that? :)&lt;/p&gt;
&lt;h2 id=&quot;adding-ola-support&quot;&gt;Adding OLA support &lt;a class=&quot;direct-link&quot; href=&quot;#adding-ola-support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Okay, so that&#39;s most of our requirements covered.  We only have the OLA to add.  The requirement was that if the workflow does not complete within 10 minutes, the business want the following to happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any placed sales call is to be cancelled.&lt;/li&gt;
&lt;li&gt;The service desk takes over the process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To implement this, we&#39;re going to use a cool Rebus feature: deferred messages (which are talked about in the &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Timeout-Manager&quot;&gt;timeout manager section&lt;/a&gt; of the Rebus wiki).  Using this feature we can send ourselves a message that will be received at a time in the future.  If that message is received before the saga completes then we know that our time is up!  We send it like this:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Defer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TimeSpan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FromSeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardingOlaBreached&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;SagaId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we get that, we just handle it like any other message.  Here&#39;s the handler to meet our OLA breach requirements:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IAmInitiatedBy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingOlaBreached&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardingOlaBreached&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Information&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$&lt;span class=&quot;token string&quot;&gt;&quot;ONBOARDING OLA BREACH PENDING FOR for saga {m.SagaId}.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;CancelSalesCall&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;For this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;NotifyServiceDesk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;With $&lt;span class=&quot;token string&quot;&gt;&quot;Customer onboarding OLA breach pending for new customer {this.Data.CustomerName} with email {this.Data.CustomerEmail}.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;            Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Information&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$&lt;span class=&quot;token string&quot;&gt;&quot;Abandoning saga {this.Data.Id}.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;MarkComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; so that the code in this interface section could access the &lt;code&gt;Saga.MarkAsComplete()&lt;/code&gt;, I added a &lt;code&gt;MarkComplete()&lt;/code&gt; member: &lt;code&gt;member this.MarkComplete() = base.MarkAsComplete()&lt;/code&gt;.  There is probably a cleaner syntax somewhere!&lt;/p&gt;
&lt;p&gt;We send a message to cancel the sales call and then send another message to notify the service desk that bad things are about to happen!  After that, we call &lt;code&gt;MarkAsComplete()&lt;/code&gt; to close the saga.&lt;/p&gt;
&lt;p&gt;Don&#39;t forget that we need to set up a correlation for our timeout message (&lt;code&gt;SagaId&lt;/code&gt; string at the end is implemented similar to before):&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CorrelateMessages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICorrelationConfig&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// snip&lt;/span&gt;&lt;br&gt;    config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Correlate&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingOlaBreached&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingOlaBreached&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  obj&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SagaId    &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; SagaId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to add a couple of handlers that will respond to our new fire-and-forget messages.  As these are not responding, they are simpler creatures:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CancelSalesCallHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;CancelSalesCall&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CancelSalesCall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token comment&quot;&gt;// Cancellation should allow for the call not having been placed as yet.&lt;/span&gt;&lt;br&gt;                    Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Information&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$&lt;span class=&quot;token string&quot;&gt;&quot;Cancelling sales call for account {m.AccountId}.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NotifyServiceDeskHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;NotifyServiceDesk&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NotifyServiceDesk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Information&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$&lt;span class=&quot;token string&quot;&gt;&quot;Notifying the service desk that: {m.Message}.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, we need to update the configuration spell to tell Rebus where to store timeouts.  We&#39;re going to store those in the file system for now:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; configureRebus &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rebus&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RebusConfigurer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// snip&lt;/span&gt;&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Timeouts &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseFileSystem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c:/rebus-advent/timeouts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s all we need to meet the remaining requirements around the OLA and compensating actions.  In the code, we hard wired a 5-second timeout, so we can easily see the timeout in action by increasing the pretend delay in one of our handlers.&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SendWelcomeEmailHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; bus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SendWelcomeEmail&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SendWelcomeEmail&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token computation-expression keyword&quot;&gt;task&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// This delay will breach our OLA rules!&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;WelcomeEmailSent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;For m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, when we run the saga we will see the delay causing the OLA to become breached and the compensating actions taking over.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/saga-logging-output-breached-ola.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The code at this point is in the branch &lt;code&gt;7-ola-and-compensating-actions&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;migrating-to-the-cloud&quot;&gt;Migrating to the Cloud &lt;a class=&quot;direct-link&quot; href=&quot;#migrating-to-the-cloud&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;What we have at this point will run in the IDE and can easily be installed as a Windows Service, as mentioned earlier.  All that remains now is to show how easy it is to migrate this to the cloud and run it in an Azure App Service.&lt;/p&gt;
&lt;p&gt;As we do this, you&#39;ll notice that all we change is the configuration and the functionality remains the same.  That&#39;s pretty awesome!  (Okay, sure, I&#39;ve added some code to get the .Net &lt;code&gt;IConfiguration&lt;/code&gt;, but that doesn&#39;t count. :) )&lt;/p&gt;
&lt;p&gt;We have two App Services that will host our entry point API and the back end processing system.  Instead of the file system, we will be using Azure Service Bus for our message transport and a SQL Azure database to store our saga state.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/azure-architecture.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you know, we&#39;re using  &lt;a href=&quot;https://github.com/rebus-org/Topper&quot;&gt;Topper&lt;/a&gt; so that we can easily run our Rebus back end in the Azure App Service as continuous Web Job.  This means we need to have the App Service configured as &lt;em&gt;always on&lt;/em&gt;.  We need to create a database for Rebus to use, but we&#39;re Rebus will create the tables if they don&#39;t already exist.  The same is true for the queues in our Azure Service Bus.  We need to change our configuration spells a little so that we can use these Azure resources.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; In my production systems, I like to control the configuration based on a value in &lt;code&gt;appsettings.json&lt;/code&gt;.  That means I always have my local file system transport set up and ready for any debugging I might want to do locally.&lt;/p&gt;
&lt;p&gt;We need to add the &lt;a href=&quot;https://www.nuget.org/packages/Rebus.AzureServiceBus&quot;&gt;Rebus.AzureServiceBus NuGet&lt;/a&gt; to our API and back end projects, and the &lt;a href=&quot;https://www.nuget.org/packages/Rebus.SqlServer&quot;&gt;Rebus.SqlServer&lt;/a&gt; to our back end project.  I&#39;m using a basic SQL Azure database that costs £3.72 per month.  That should be adequate until start onboarding a lot of customers!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; To avoid making our connections strings visible in our code, we&#39;re going to use .Net 5&#39;s built-in &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-5.0&amp;amp;tabs=windows&quot;&gt;secret management&lt;/a&gt;.  You could also just store those in your &lt;code&gt;appsettings.json&lt;/code&gt; while testing the code and not check them in!&lt;/p&gt;
&lt;p&gt;You can access your Azure Service Bus connection string from the &lt;strong&gt;Shared access policies&lt;/strong&gt; in the portal:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/azure-service-bus-connection-string.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; you can set your user secrets from the command line in the project folder: &lt;code&gt;dotnet user-secrets set &amp;quot;ConnectionStrings:MsSqlConnectionString&amp;quot; &amp;quot;you connection string&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the adjusted configuration spell for the back end:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; configureRebus &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rebus&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RebusConfigurer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; asbConnection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetConnectionString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AzureServiceBusConnectionString&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; sqlConnection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetConnectionString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MsSqlConnectionString&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Logging   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; l &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Serilog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                                                                             &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Routing   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TypeBased&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MapAssemblyOf&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MainQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Transport &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseAzureServiceBus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;asbConnection&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MainQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AutomaticallyRenewPeekLock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Options   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SimpleRetryStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;errorQueueAddress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ErrorQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                                 &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Options   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;EnableMessageAuditing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;auditQueue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AuditQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                                      &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Sagas     &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;StoreInSqlServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sqlConnection&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Sagas&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SagaIndexes&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                               &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that the &lt;code&gt;.Transport&lt;/code&gt; has changed to use Azure Service Bus (and that we allow Rebus to automatically renew peek locks on our behalf) and that the &lt;code&gt;.Sagas&lt;/code&gt; configuration now uses SQL Server.  If you&#39;re paying close attention, you might have noticed that there is no longer an item to configure timeout storage.  That is because Rebus is using native behaviour in Azure Service Bus to achieve that (as it does with subscription storage, which is beyond the scope of this article). Nice!&lt;/p&gt;
&lt;p&gt;Just so we can see what&#39;s happened, we&#39;ve turned on message auditing using &lt;code&gt;.EnableMessageAuditing(...)&lt;/code&gt;.  Rebus will now put a copy of every processed message into the queue we nominate.&lt;/p&gt;
&lt;p&gt;The configuration spell for the API is adjusted similarly:&lt;/p&gt;
&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; configure &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rebus&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RebusConfigurer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; asbConnection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetConnectionString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AzureServiceBusConnectionString&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Logging   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; l &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                                                  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Routing   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TypeBased&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Map&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MainQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Transport &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseFileSystemAsOneWayClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;asbConnection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Options   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SimpleRetryStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;errorQueueAddress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ErrorQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;br&gt;    rebus&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure that you update the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Azure.ServiceBus&quot;&gt;Microsoft.Azure.ServiceBus NuGet&lt;/a&gt; package to 5.0.0 or above or you might see an error like this when sending messages from the API:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Rebus.Exceptions.RebusApplicationException: Could not send to queue &#39;MainQueue&#39; ---&amp;gt; System.InvalidOperationException: Operation is not valid due to the current state of the object.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So, we can now run locally just the same as we before, but our messages will be stored in Azure Service Bus and sagas in SQL Azure (don&#39;t forget to allow access to SQL Azure from your local IP address!).  Run just the API and post to our &lt;code&gt;/newcustomer&lt;/code&gt; route and you will see there is a message in Azure Service Bus:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/azure-service-bus-message-peek.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Run the back end project and you will see in the console that Rebus has created tables and queues for us before processing the waiting message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/rebus-console-azure-backend-first-run.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;We now just need to publish our two projects and we&#39;ll have our onboarding process running in Azure.  Before you do that, you will need to set up your connection strings in your App Service:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/azure-app-service-configuration.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;To publish our backend processor as a Web Job we&#39;ll use Visual Studio (as Rider&#39;s Azure integration doesn&#39;t include Web Job support - but, hey, who knows what we might get for Xmas! :) ).  The process is pretty simple and you can create your App Services along the way if you want:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/visual-studio-publish.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Make sure you set your Web Job to be continuous when you publish:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/visual-studio-publish-ensure-continuous.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;After you&#39;ve published, check that your back end is working by looking in the Web Job section:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/azure-app-service-web-job-running.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If it&#39;s not running, click on logs to the output and diagnose.  Once it is running then you should be able to post to the &lt;code&gt;/newcustomer&lt;/code&gt; API and see the same output we saw in our console in the Web Job logs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-fsharp/azure-web-job-log-processed.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Congratulations - you now have your onboarding business process running in an Azure App Service Web Job and your API entry point running in Azure App Service.&lt;/p&gt;
&lt;p&gt;The code at this point is in the branch &lt;code&gt;8-running-in-azure&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy Rebus!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Long-running business processes in C# with Rebus on Azure</title>
		<link href="https://seankearon.me/posts/2020/12/rebus-sagas-csharp/"/>
		<updated>2020-12-07T00:00:00+00:00</updated>
		<id>https://seankearon.me/posts/2020/12/rebus-sagas-csharp/</id>
		<content type="html">&lt;p&gt;This post is part of the &lt;a href=&quot;https://www.csadvent.christmas/&quot;&gt;C# Advent Calendar 2020&lt;/a&gt;.  There is an equivalent post in F# &lt;a href=&quot;https://seankearon.me/posts/2020/11/rebus-sagas-fsharp/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;introduction&quot;&gt;Introduction &lt;a class=&quot;direct-link&quot; href=&quot;#introduction&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This post talks about how to build a system that runs a long-running business process (aka workflow or &amp;quot;saga&amp;quot;) using a .Net library called &lt;a href=&quot;https://github.com/rebus-org/Rebus&quot;&gt;Rebus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rebus is a library that makes it easy to build reliable, distributed systems.  We will show how to host our Rebus system in Azure App Services.  You will also be able to run it by pressing F5 in your IDE.&lt;/p&gt;
&lt;p&gt;We will be implementing a set of fictional, but quite typical business requirements around the onboarding of a new customer.&lt;/p&gt;
&lt;p&gt;So, let&#39;s get started!&lt;/p&gt;
&lt;h1 id=&quot;introducing-rebus&quot;&gt;Introducing Rebus &lt;a class=&quot;direct-link&quot; href=&quot;#introducing-rebus&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Rebus is a distributed, asynchronous and durable .Net Service Bus that is a pleasure to use.  I like to think of Rebus as microservices without the &lt;a href=&quot;https://en.wiktionary.org/wiki/faff&quot;&gt;faff&lt;/a&gt;!  It&#39;s a .Net library uses messages to communicate between parts of your application and can do that reliably by using one of the various options for transporting and sharing those messages.  Rebus can be anywhere your application is (except on mobile and embedded devices afaik).&lt;/p&gt;
&lt;p&gt;I&#39;ve been using Rebus for a long time now.  In my current gig, we are using Rebus in a national medicines optimisation healthcare system that serves around 50 million patients across the UK.  Rebus has helped us simplify and centralise a lot of complex, legacy back end processing and allow us to move the system from on-prem to the cloud.&lt;/p&gt;
&lt;p&gt;As a &amp;quot;message-based architecture&amp;quot;, Rebus is similar to other .Net Service Buses such as NServiceBus, Mass Transit or EasyNetQ.  Like these other service buses, Rebus uses a push model where it reacts to incoming messages.  This is distinct to streaming approaches such as used by Kafka, etc.&lt;/p&gt;
&lt;p&gt;Rebus is open source (MIT), completely free to use and has around 1.4K GitHub stars.  It is Danish software and the founder and primary maintainer is Mogens Heller Grabe (&lt;a href=&quot;https://twitter.com/mookid8000&quot;&gt;@mookid8000&lt;/a&gt;).  Mogens runs a company that provides consultancy, support and some rather excellent monitoring software for use with Rebus (more details here: &lt;a href=&quot;https://rebus.fm/services/&quot;&gt;https://rebus.fm/services/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Thanks to Mogens for kindly reviewing the content of this post.&lt;/p&gt;
&lt;h1 id=&quot;what-good-things-does-rebus-bring-us%3F&quot;&gt;What good things does Rebus bring us? &lt;a class=&quot;direct-link&quot; href=&quot;#what-good-things-does-rebus-bring-us%3F&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Rebus brings high levels of reliability to your system.  Each message will either be processed or sent to an error queue so that you can fix the problem and replay it later.&lt;/p&gt;
&lt;p&gt;Rebus naturally breaks your system down into small chunks of functionality called handlers that are easy to write, reason about and test.  I find working with Rebus to be a very good developer experience (and the error messages are really useful too!).&lt;/p&gt;
&lt;p&gt;One or more handlers can respond to and process messages, which makes it very easy to extend your system without changing existing code.  Different handlers that process the same message do not need to be in the same application component.  This makes it easy to architect your application in a manner that supports your performance, scaling and security needs.&lt;/p&gt;
&lt;p&gt;Rebus can use various technologies to store messages that are being processed.  These are called &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Transport&quot;&gt;message transports&lt;/a&gt; and include RabbitMQ, Azure Service Bus, Amazon SQS and various databases.  There are also transports that use the file system or in-memory.  Rebus relies on the transport to provide durability and reliability, so you probably don&#39;t want to use the in-memory transport when you care about losing messages!  If Rebus can&#39;t process a message then it can retry that processing either in using a &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Automatic-retries-and-error-handling#customizing-retries&quot;&gt;simple approach&lt;/a&gt;, using a &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Back-off-strategy&quot;&gt;back-off strategy&lt;/a&gt; and you can also add a &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Automatic-retries-and-error-handling#second-level-retries&quot;&gt;second layer of processing&lt;/a&gt; for a more comprehensive approach to handling failures.&lt;/p&gt;
&lt;p&gt;Ultimately, if the message can&#39;t be processed for whatever reason, then Rebus will keep it for you in the part of the transport that you nominate as the error queue when you configure Rebus.  As well as the message, Rebus also stores the details of the failures in the message&#39;s headers so that you can easily see what went wrong and fix it.  When you&#39;ve put the database server&#39;s plug back into the wall, or fixed the cause of the failure in some other way, you can move the message back to the processing queue so that processing can begin again!&lt;/p&gt;
&lt;p&gt;There are plenty of other good things in Rebus that we don&#39;t have time to talk about here, such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Data-bus&quot;&gt;Transporting larger data using the Data Bus&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Workers-and-parallelism&quot;&gt;Controlling the number of workers and parallelism&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Wire-level-format-of-messages&quot;&gt;Controlling how Rebus serialises messages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Message-compression-and-encryption&quot;&gt;Compressing and encrypting the contents of messages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you&#39;d expect, there is superb support for &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Testing&quot;&gt;testing too&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Check out the official wiki here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki&quot;&gt;https://github.com/rebus-org/Rebus/wiki&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;overview-of-our-scenario&quot;&gt;Overview of our scenario &lt;a class=&quot;direct-link&quot; href=&quot;#overview-of-our-scenario&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We are going to jump into Rebus a little beyond the basics of request/reply or pub/sub and look at how to model long-running, durable workflows (aka sagas) in Rebus.  We are going to use Rebus to build an application that processes new customers for a hypothetical business and then host that in an Azure App Service.  You could also run the same code as a Windows Service if you want, and it will run just the same in your IDE when you press F5 (or whatever you press to run your shizzle!).&lt;/p&gt;
&lt;p&gt;We&#39;re going to add a few requirements into our made-up business scenario, just so that we can showcase some of Rebus&#39; features.  Let&#39;s take a look at the business requirements.&lt;/p&gt;
&lt;p&gt;We&#39;re going to model a business process that is under an &lt;a href=&quot;https://en.wikipedia.org/wiki/Operational-level_agreement&quot;&gt;OLA&lt;/a&gt; and which has compensating actions that must be taken if the requirements in the OLA are not met.&lt;/p&gt;
&lt;p&gt;The business wants us to build a system to handle the onboarding of new customers.  As well as functional requirements, the business also have operational requirements so that they can meet their &lt;a href=&quot;https://en.wikipedia.org/wiki/Operational-level_agreement&quot;&gt;operational level agreements (OLA)&lt;/a&gt;.  When a new customer is taken on, the business wants the following to happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An account is to be created for the customer.&lt;/li&gt;
&lt;li&gt;A welcome email is to be sent to the customer after the account is created.&lt;/li&gt;
&lt;li&gt;A sales call is scheduled in the CRM after the account has been created.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The business has an OLA in place that stipulates that new customers must be processed within a given time.  So that they can meet their OLA requirements, they want our workflow to complete within 10 minutes of the customer being taken on.  If the workflow does not complete within 10 minutes, the business wants the following to happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any placed sales call is to be cancelled.&lt;/li&gt;
&lt;li&gt;The service desk takes over the process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Great - we know what they want.  So, let&#39;s start building it!&lt;/p&gt;
&lt;h1 id=&quot;our-architecture&quot;&gt;Our architecture &lt;a class=&quot;direct-link&quot; href=&quot;#our-architecture&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Our architecture is very simple.  This is what it looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/customer-onboarding-architecture.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;There is a web API that serves as an entry point to let us know about the new customer.  There is a back end processing system that does all our processing.  There is also a CRM and a customer database.&lt;/p&gt;
&lt;p&gt;We are going to build the entry point API and the back end processing system.  We are going to pretend that the CRM and the database exist.&lt;/p&gt;
&lt;p&gt;Rebus will be used in the web API and the back end processing system.&lt;/p&gt;
&lt;h1 id=&quot;setting-up-the-projects&quot;&gt;Setting up the projects &lt;a class=&quot;direct-link&quot; href=&quot;#setting-up-the-projects&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We&#39;re going to be using .Net 5, and I&#39;ll be using JetBrains Rider, but you can use your IDE of choice!  We&#39;re going to build everything so that it runs on our local machines and then migrate it to the Cloud later.  You can find the code in GitHub here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/seankearon/rebus-onboardingcs.git&quot;&gt;https://github.com/seankearon/rebus-onboardingcs.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So that you can skip ahead, there are branches that have the outcomes of the stages as mentioned below.&lt;/p&gt;
&lt;p&gt;The basic setup is to create a project for our Web API and a Console App project for our back end processor.  We&#39;ll call these EntryPointAPI and OnboardingProcessor respectively.  We&#39;ll see later how to run this locally, in an Azure App Service or a Windows Service.&lt;/p&gt;
&lt;p&gt;Then we add the &lt;a href=&quot;https://www.nuget.org/packages/Rebus&quot;&gt;Rebus&lt;/a&gt; and &lt;a href=&quot;https://www.nuget.org/packages/Rebus.ServiceProvider&quot;&gt;Rebus.ServiceProvider&lt;/a&gt; NuGet packages to each project, giving us something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/1-basic-project-cs.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This stage is available on the branch &lt;em&gt;1-basic-project-setup&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id=&quot;defining-our-messages&quot;&gt;Defining our messages &lt;a class=&quot;direct-link&quot; href=&quot;#defining-our-messages&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;So, now we have a couple of projects waiting for some code, we need to think about what we&#39;re going to build!  In a message-based system, a good place to start is designing your messages.&lt;/p&gt;
&lt;p&gt;In Rebus, you model your messages as &lt;a href=&quot;https://en.wikipedia.org/wiki/Plain_old_CLR_object&quot;&gt;POCOs&lt;/a&gt;.  Messages will be used by different parts of our system, so we&#39;ll put them into a shared assembly.  Messages should also be small and immutable.  (Rebus does allow mutating a message but, as processing is asynchronous, it&#39;s not a good idea as it can lead to unpredictable behaviour.  If you find you need to change the message state during processing then look at using another message to model the state changes.)&lt;/p&gt;
&lt;h2 id=&quot;events-and-commands&quot;&gt;Events and commands &lt;a class=&quot;direct-link&quot; href=&quot;#events-and-commands&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we look at our requirements and start building our messages, let&#39;s take a moment to look at two types of messages.&lt;/p&gt;
&lt;p&gt;Messages split into two broad categories: events and commands.  These correspond to the general meaning of the words with an event being a general notification that something has occurred (i.e. in the past), and a command is a when you tell a component to do something.&lt;/p&gt;
&lt;p&gt;To send a command in Rebus you use either &lt;code&gt;IBus.Send()&lt;/code&gt; or &lt;code&gt;IBus.SendLocal()&lt;/code&gt; to send the message to a specific queue.  The difference between those calls is that with &lt;code&gt;IBus.Send()&lt;/code&gt; you need to use Rebus&#39; routing to tell Rebus where to send the message, but &lt;code&gt;IBus.SendLocal()&lt;/code&gt; always sends the message to the current endpoint&#39;s queue.&lt;/p&gt;
&lt;h2 id=&quot;our-first-set-of-messages&quot;&gt;Our first set of messages &lt;a class=&quot;direct-link&quot; href=&quot;#our-first-set-of-messages&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s leave the OLA requirements to one side for now and look at our main requirements.  These say that when a customer is onboarded that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An account is to be created for the customer.&lt;/li&gt;
&lt;li&gt;A welcome email is to be sent to the customer after the account is created.&lt;/li&gt;
&lt;li&gt;A sales call is scheduled in the CRM after the account has been created.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, if we were sitting in a room together and someone was telling us what to do, they&#39;d probably say something like this:&lt;/p&gt;
&lt;p&gt;&amp;quot;Create an account for Sean.&amp;quot;&lt;br&gt;
&amp;quot;Account created for Sean.&amp;quot;&lt;br&gt;
&amp;quot;Send a welcome email to Sean.&amp;quot;&lt;br&gt;
&amp;quot;Schedule a sales call with Sean.&amp;quot;&lt;br&gt;
&amp;quot;Welcome email sent to Sean&amp;quot;&lt;br&gt;
&amp;quot;Sales call scheduled with to Sean&amp;quot;&lt;/p&gt;
&lt;p&gt;Someone is listening and ticks off what has been done.  If the process doesn&#39;t finish in time then they tell everyone to stop.  Check if the sales call should be cancelled and tell the service desk to take over.&lt;/p&gt;
&lt;p&gt;So, that looks like three commands and an event to me!  As it&#39;s good for messages to be immutable, let&#39;s use C# 9&#39;s new records feature to implement our messages, which gives us:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;record&lt;/span&gt; OnboardNewCustomer&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; Name  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; Email &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;record&lt;/span&gt; CreateCustomerAccount&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; Name  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; Email &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;record&lt;/span&gt; CustomerAccountCreated&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; Email      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;    CustomerId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;record&lt;/span&gt; SendWelcomeEmail&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; CustomerId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;record&lt;/span&gt; WelcomeEmailSent&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; CustomerId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;record&lt;/span&gt; ScheduleSalesCall&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; CustomerId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;record&lt;/span&gt; SalesCallScheduled&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; CustomerId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generally, you will want your messages to contain as little information as possible.  After the customer has been created, we then use the ID of the customer.  We use the &lt;code&gt;CustomerAccountCreated&lt;/code&gt; message to let us know what ID the new customer has been assigned.  We will see how that is used later.&lt;/p&gt;
&lt;p&gt;This stage is available on the branch &lt;em&gt;2-main-messages-added&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;creating-the-web-api-entry-point&quot;&gt;Creating the web API entry point &lt;a class=&quot;direct-link&quot; href=&quot;#creating-the-web-api-entry-point&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The next job is to make our web API tell the backend about any new customers.  We&#39;ll just add a simple route to allow posting of a name and email.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;POST /newcustomer?name=my name&amp;amp;email=me@my.email&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we receive such a &lt;code&gt;POST&lt;/code&gt; request then we will start the onboarding process by sending a &lt;code&gt;CreateCustomerAccount&lt;/code&gt; message to the bus and respond with a &lt;code&gt;200 OK&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;OnboardNewCustomer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; email &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To do this, we need to set up Rebus in our web API.  There are two basic modes of operation for Rebus &amp;quot;out of the box&amp;quot;: normal and one-way client.  The one-way client mode &amp;quot;does what it says on the tin&amp;quot; and allows you to send messages from a component.  In normal mode, Rebus can send and receive messages.  You can read more about those &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Different-bus-modes&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are going to set up Rebus inside our .Net 5 web API and inject an instance of the Rebus &lt;code&gt;IBus&lt;/code&gt; into our controller.  Remember, at this stage, we are just using the file system as our transport and will be adding Azure later.  In time-honoured fashion, let&#39;s use an extension method to configure and register an &lt;code&gt;IBus&lt;/code&gt; instance and then inject that into our controller.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;Startup.cs&lt;/code&gt; we will add one call to our configure services method:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IServiceCollection&lt;/span&gt; services&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddControllers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token range operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// This configures and registers Rebus.&lt;/span&gt;&lt;br&gt;    services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddRebusAsOneWayClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In our controller, we add a constructor parameter for the &lt;code&gt;IBus&lt;/code&gt; so that it will be injected into the instance.  Our controller method can then send the message to the bus, making our controller class look like this:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ApiController&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CustomerController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ControllerBase&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CustomerController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        _bus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpPost&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;newcustomer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IActionResult&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;NewCustomer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;OnboardNewCustomer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; email &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty simple, right?  All that remains now is to look at the configuration in our extension method.  This looks like:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddRebusAsOneWayClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IServiceCollection&lt;/span&gt; services&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddRebus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;        cfg &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; cfg&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Logging   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                                               &lt;span class=&quot;token comment&quot;&gt;// A&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Routing   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TypeBased&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MainQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;// B&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Transport &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseFileSystemAsOneWayClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c:/rebus-advent&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;// C&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Options   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SimpleRetryStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token named-parameter punctuation&quot;&gt;errorQueueAddress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ErrorQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// D&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, in our configuration we do the following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; We tell Rebus to log to the console.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;B:&lt;/strong&gt; We tell Rebus where to send the &lt;code&gt;OnboardNewCustomer&lt;/code&gt; messages.  In Rebus, messages go to &amp;quot;queues&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C:&lt;/strong&gt; we tell Rebus to use the file system to transport messages, and we tell Rebus that we will only ever be sending messages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D:&lt;/strong&gt; we tell Rebus to retry any failures (the default is 5 times, but you can set that as you wish) and to send messages that are still failing log to the queue called &amp;quot;ErrorQueue&amp;quot;.&lt;/p&gt;
&lt;p&gt;This configuration will change a little later when we use Azure ServiceBus as our message transport.  But, we&#39;re now ready to start sending messages.  Woohoo!&lt;/p&gt;
&lt;p&gt;The code at this point is available in the branch &lt;code&gt;3-entry-point-api-working&lt;/code&gt;.  Go and run that, crank up your favourite HTTP tool and send the following to your new API (don&#39;t forget to add the host!):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;POST /newcustomer?name=Sean&amp;amp;email=sean@my.email&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; If you&#39;re using Rider, you can run the line above from  &lt;a href=&quot;https://www.jetbrains.com/help/rider/Http_client_in__product__code_editor.html&quot;&gt;Rider&#39;s built-in HTTP client&lt;/a&gt;.  How cool is that? :)&lt;/p&gt;
&lt;p&gt;Then you will see a file has appeared in &lt;code&gt;c:/rebus-advent/MainQueue&lt;/code&gt;.  We can just open that up to see that a message in Rebus consists of a set of headers and a body:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;Headers&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-intent&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;p2p&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-msg-id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;323e07bb-4dd2-43b4-af5d-9c5749742cd7&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-senttime&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2020-11-10T11:17:26.1492853+00:00&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-msg-type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;OnboardingMessages.OnboardNewCustomer, OnboardingMessages&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-corr-id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;323e07bb-4dd2-43b4-af5d-9c5749742cd7&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-corr-seq&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;rbs2-content-type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;application/json;charset=utf-8&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;Body&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eyIkdHlwZSI6Ik9uYm9hcmRpbmdNZXNzYWdlcy5PbmJvYXJkTmV3Q3VzdG9tZXIsIE9uYm9hcmRpbmdNZXNzYWdlcyIsIk5hbWUiOiJTZWFuIiwiRW1haWwiOiJzZWFuQG15LmVtYWlsIn0=&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The body is Base64 encoded JSON that is our serialised message:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;$type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;OnboardingMessages.OnboardNewCustomer, OnboardingMessages&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Sean&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;Email&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sean@my.email&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;a-quick-review&quot;&gt;A quick review &lt;a class=&quot;direct-link&quot; href=&quot;#a-quick-review&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;So, to add Rebus to our normal .Net Web API project we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defined our messages.&lt;/li&gt;
&lt;li&gt;Added around 4 lines of configuration.&lt;/li&gt;
&lt;li&gt;Registered Rebus into .Net 5&#39;s DI.&lt;/li&gt;
&lt;li&gt;Sent the message into our bus directly from our controller method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the reliability and durability that Rebus&#39; brings, any client that calls our &lt;code&gt;/newcustomer&lt;/code&gt; API and receives a &lt;code&gt;200 OK&lt;/code&gt; knows that the onboarding process has now started and that it will be processed as expected.&lt;/p&gt;
&lt;p&gt;That&#39;s a good start!  Let&#39;s move on to creating the back end of our system that is going to process the messages from the API.&lt;/p&gt;
&lt;h1 id=&quot;creating-the-back-end&quot;&gt;Creating the back end &lt;a class=&quot;direct-link&quot; href=&quot;#creating-the-back-end&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The way we set up Rebus in the back end is going to be very similar to how we did that in the API.  There are some essential differences that we will focus on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The back end needs to send &lt;em&gt;and&lt;/em&gt; receive messages.&lt;/li&gt;
&lt;li&gt;The back end will be performing a long-running, durable workflow/saga.&lt;/li&gt;
&lt;li&gt;We want to be able to host the back end in an Azure App Service, as well as run it locally (and, possibly, in a Windows Service).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;configuring-rebus-for-send-and-receive&quot;&gt;Configuring Rebus for send and receive &lt;a class=&quot;direct-link&quot; href=&quot;#configuring-rebus-for-send-and-receive&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, we are going to configure Rebus for our back end.  So that we can run locally or in an Azure App Service, we are going to use a library called &lt;a href=&quot;https://github.com/rebus-org/Topper&quot;&gt;Topper&lt;/a&gt; form the creator of rebus, Mogens (here&#39;s &lt;a href=&quot;https://rebus.fm/2019/01/29/generic-host/&quot;&gt;Mogens&#39; blog&lt;/a&gt; introducing Topper..  Under the hood, Topper uses the venerable &lt;a href=&quot;http://topshelf-project.com/&quot;&gt;Topshelf library&lt;/a&gt; and requires us to implement our back end as an &lt;code&gt;IDisposable&lt;/code&gt; wrapper and run it inside a Console application project.&lt;/p&gt;
&lt;p&gt;I&#39;m going to sprinkle in a little bit of &lt;a href=&quot;https://github.com/serilog/serilog&quot;&gt;Serilog&lt;/a&gt; too, just for fun.  Our entry point will look like the following:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Program&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;LoggerConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WriteTo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CreateLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; configuration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;ServiceConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;OurBackendBus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Backend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        ServiceHost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;configuration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That all we need to do to set up for running locally or in Azure.  We can also create and run it as a Windows Service just by calling the executable using the parameter &lt;code&gt;install&lt;/code&gt; (use &lt;code&gt;uninstall&lt;/code&gt; to remove the service).  Very cool!&lt;/p&gt;
&lt;p&gt;The rest of the magic all happens in our &lt;code&gt;Backend&lt;/code&gt; class.  Let&#39;s take a look at that class:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Backend&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IDisposable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ServiceProvider&lt;/span&gt; _provider&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt;          &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt;            _bus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Backend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; services &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;ServiceCollection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddRebusAsSendAndReceive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        _provider &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;BuildServiceProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        _provider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseRebus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; _bus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        _bus&lt;span class=&quot;token punctuation&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        _provider&lt;span class=&quot;token punctuation&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, like previously, we&#39;ve put the configuration spell into an extension method, which looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddRebusAsSendAndReceive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IServiceCollection&lt;/span&gt; services&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddRebus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;        cfg &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; cfg&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Logging&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Serilog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Routing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TypeBased&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;MapAssemblyOf&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MainQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Transport&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseFileSystem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c:/rebus-advent&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MainQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SimpleRetryStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token named-parameter punctuation&quot;&gt;errorQueueAddress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ErrorQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Sagas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseFilesystem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c:/rebus-advent/sagas&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;AutoRegisterHandlersFromAssemblyOf&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Backend&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is very similar to the previous one, but we are not using the &lt;code&gt;*AsOneWayClient&lt;/code&gt; flavours of the configuration methods.  We are going to be dealing with more than one message in our back end, so the routing maps all messages from the assembly to our &lt;code&gt;MainQueue&lt;/code&gt;.  The file system transport is two-way and therefore needs to know which queue to work against - that&#39;s &lt;code&gt;MainQueue&lt;/code&gt; again.  Lastly, we&#39;ve got a new configuration item to set us up ready for our sagas later on.&lt;/p&gt;
&lt;p&gt;There is one new line that we haven&#39;t seen before now: &lt;code&gt;services.AutoRegisterHandlersFromAssemblyOf&amp;lt;Backend&amp;gt;();&lt;/code&gt;.  This tells Rebus to scan the assembly to find and register handlers, which in Rebus are types that will process messages.  You can now test that the lovely new backend is working by adding a handler for the &lt;code&gt;OnboardNewCustomer&lt;/code&gt; message, as follows:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DummyHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OnboardNewCustomer&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;NotImplementedException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have a message waiting in the queue from before, then this will be found and Rebus will pass it to the handler above and can break in your IDE to see that the data from our earlier message is passed into our handler.  If you don&#39;t have a message waiting, just use the API to send one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/cs-break-in-handler.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can also see the logging output in the console:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/rebus-console-output.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you allow the program to run, you&#39;ll see in the console that Rebus will retry the message 5 times - getting our &lt;code&gt;NotImplementedException&lt;/code&gt; each time, and then the message is moved to our &lt;code&gt;ErrorQueue&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/message-in-error-queue-filesystem.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Just drag it back to the &lt;code&gt;MainQueue&lt;/code&gt; to start processing again!&lt;/p&gt;
&lt;p&gt;You can find the code at this point on the branch &lt;code&gt;4-back-end-configuration&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt;  Did you see what happened there?  Our system didn&#39;t stop working just because the back end component was down (okay, not even written yet!!).  The message stayed in the queue and waited until there was something to process it.  That&#39;s a nice example of how using Rebus increases the reliability of your system.&lt;/p&gt;
&lt;h2 id=&quot;creating-the-saga&quot;&gt;Creating the saga &lt;a class=&quot;direct-link&quot; href=&quot;#creating-the-saga&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Okay, we&#39;re ready now to create our saga, the code that will run our workflow.  Rebus models sagas by implementing two connected classes.  One that holds any state that changes throughout the workflow, and one that is responsible for coordinating the work done throughout the long-running process.  This is what the basic structures look like:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardingSagaData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ISagaData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Guid&lt;/span&gt; Id       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;  Revision &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardingSaga&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Saga&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IAmInitiatedBy&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CorrelateMessages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ICorrelationConfig&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;token range operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OnboardNewCustomer&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token range operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;OnboardingSagaData&lt;/code&gt; class has the &lt;code&gt;Id&lt;/code&gt; and &lt;code&gt;Revision&lt;/code&gt; properties from the &lt;code&gt;ISagaData&lt;/code&gt; interface so that Rebus can control concurrent access to the saga&#39;s state for us.&lt;/p&gt;
&lt;p&gt;Each time a customer is onboarded, there will be a saga instance that is responsible for controlling the onboarding workflow for that customer.  The &lt;code&gt;CorrelateMessages&lt;/code&gt; method in the  &lt;code&gt;OnboardingSaga&lt;/code&gt; class is used by Rebus to find the saga instance that relates to a particular message.&lt;/p&gt;
&lt;p&gt;We tell Rebus when to start a new saga by adding the interface &lt;code&gt;IAmInitiatedBy&amp;lt;OnboardNewCustomer&amp;gt;&lt;/code&gt;.  Soon, we will add other messages that will be processed by the saga by using the &lt;code&gt;IHandleMessages&amp;lt;T&amp;gt;&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;Let&#39;s push on and see how this is implemented for the full workflow (except the OLA requirements).&lt;/p&gt;
&lt;p&gt;We need to track what&#39;s going on in our workflow.  We do that by adding state to the &lt;code&gt;ISagaData&lt;/code&gt; implementation.  We&#39;re going to keep hold of the name, email and the new account id and we also want to track what actions have happened.   I&#39;ve added the &lt;code&gt;IsComplete&lt;/code&gt; helper property that we&#39;ll use in the saga.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardingSagaData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ISagaData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Guid&lt;/span&gt; Id       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;  Revision &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; CustomerName  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; CustomerEmail &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;    AccountId     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; AccountCreated     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; WelcomeEmailSent   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; SalesCallScheduled &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; IsComplete &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; AccountCreated &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; WelcomeEmailSent &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; SalesCallScheduled&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We update the state from inside the handlers in our saga (Rebus makes the saga&#39;s data available via the instance&#39;s &lt;code&gt;Data&lt;/code&gt; property).  For example, when we get a confirmation that the welcome email has been sent:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WelcomeEmailSent&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WelcomeEmailSent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CompetedTask&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the exit of each handler method, we call &lt;code&gt;TryComplete()&lt;/code&gt;.  This method checks to see that we&#39;ve done everything we want to do and, if so, we call the Rebus&#39; &lt;code&gt;MarkAsComplete()&lt;/code&gt; method.   Rebus will then remove clean up and remove the saga&#39;s state for us.  We call this every time as Rebus, being distributed and asynchronous, may have finished up the saga in the blink of an eye!  (Okay, we probably don&#39;t need to call it at the end of the initiating method, but I like to do that for consistency!)  This is our &lt;code&gt;TryComplete()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsComplete&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;MarkAsComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rebus needs to know how to find the saga state for our particular workflow, and we have updated the &lt;code&gt;CorrelateMessages&lt;/code&gt; method with the necessary code to let Rebus do just that:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CorrelateMessages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ICorrelationConfig&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Correlate&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;token keyword&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerEmail&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Correlate&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;CustomerAccountCreated&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;token keyword&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerEmail&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Correlate&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;WelcomeEmailSent&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Correlate&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;SalesCallScheduled&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration allows you to correlate a property value in each message handled by the saga with a value in the saga&#39;s state.  You just need to make sure Rebus can uniquely identify the saga from these values and then sit back and let Rebus do all the finding for you!  We&#39;re using the email and the account ID when it&#39;s known.  Note that you need to supply a correlation for Rebus to identify all messages to which the saga responds, including the message that initiates the saga.&lt;/p&gt;
&lt;p&gt;All that remains is to do some work inside the saga.  Generally, I like to keep my sagas pretty &amp;quot;slim&amp;quot; and make them responsible for coordinating the flow of work.  I tend to pass off work to other handlers by sending messages out from the saga.  Here&#39;s how that looks in the saga&#39;s initiating handler:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OnboardNewCustomer&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;IsNew&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerName  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerEmail &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CreateCustomerAccount&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the first line we check that the saga hasn&#39;t already been created by another process and abandon if so.  Then, after setting some state, we use the Rebus &lt;code&gt;IBus&lt;/code&gt; instance has been injected into our saga to send a command message to create an account for the customer details we have been given.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CreateCustomerAccount&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As our requirements say that everything else should happen &lt;em&gt;after&lt;/em&gt; the account has been created, that&#39;s all we need to do there.&lt;/p&gt;
&lt;p&gt;The full code looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardingSaga&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Saga&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IAmInitiatedBy&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;CustomerAccountCreated&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;WelcomeEmailSent&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;SalesCallScheduled&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnboardingSaga&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        _bus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsComplete&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token function&quot;&gt;MarkAsComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CorrelateMessages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ICorrelationConfig&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Correlate&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerEmail&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Correlate&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;CustomerAccountCreated&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerEmail&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Correlate&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;WelcomeEmailSent&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Correlate&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;SalesCallScheduled&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OnboardNewCustomer&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;IsNew&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerName  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerEmail &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CreateCustomerAccount&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CustomerAccountCreated&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountCreated &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;SendWelcomeEmail&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;AccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;ScheduleSalesCall&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;AccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WelcomeEmailSent&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WelcomeEmailSent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CompletedTask&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SalesCallScheduled&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SalesCallScheduled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;TryComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CompletedTask&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code at this stage is available in the branch &lt;code&gt;5-saga-receives-messages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you check that out, run it and start the saga by posting to our API, then the message will fail and be placed in the error queue after be retried only once.  If you open up the message, you&#39;ll see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/failed-message-with-error-in-header.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Look inside the &lt;code&gt;rbs2-error-details&lt;/code&gt; header and you will see that Rebus has stored the exception details in there for use.  They tell us this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Message with ID db52a43d-a6bc-4a9d-a6c3-3d4a324fcaba
and type OnboardingMessages.CreateCustomerAccount, OnboardingMessages
could not be dispatched to any handlers
(and will not be retried under the default fail-fast settings)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This lovely, helpful error shows what Rebus puts messages onto the error queue if it cannot find any handlers to process it.  The &amp;quot;fail-fast&amp;quot; part is Rebus&#39; built-in mechanism to skip retries when you are sure there is no point.&lt;/p&gt;
&lt;h2 id=&quot;creating-the-remaining-handlers&quot;&gt;Creating the remaining handlers &lt;a class=&quot;direct-link&quot; href=&quot;#creating-the-remaining-handlers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In a real-world application, you might choose to create another Rebus endpoint for one or more of the handlers we are going to create.  This could be because you want to deploy it separately for performance or other reasons.  Rebus makes it easy to structure your application how you want.  For us, we&#39;re going to put them all into the single endpoint - that&#39;s fine too! :)&lt;/p&gt;
&lt;p&gt;We need handlers that do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a customer account.&lt;/li&gt;
&lt;li&gt;Send a welcome email.&lt;/li&gt;
&lt;li&gt;Schedule a sales call.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we saw briefly above with our &lt;code&gt;DummyHandler&lt;/code&gt;, a handler is just a class that implements the &lt;code&gt;IHandleMessages&amp;lt;T&amp;gt;&lt;/code&gt; interface.  So, we need the following handlers:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CreateCustomerAccountHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;CreateCustomerAccount&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CreateCustomerAccountHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        _bus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CreateCustomerAccount&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Pretend we&#39;re doing something!&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CustomerAccountCreated&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SendWelcomeEmailHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;SendWelcomeEmail&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SendWelcomeEmailHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        _bus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SendWelcomeEmail&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Pretend we&#39;re doing something!&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;WelcomeEmailSent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScheduleSalesCallHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ScheduleSalesCall&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ScheduleSalesCallHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IBus&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        _bus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ScheduleSalesCall&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Pretend we&#39;re doing something!&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;SalesCallScheduled&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The fact that we included the line &lt;code&gt;services.AutoRegisterHandlersFromAssemblyOf&amp;lt;Backend&amp;gt;()&lt;/code&gt; in our Rebus setup means that we can put those handlers anywhere in our back end project.  Rebus will find them and set them up so that they are ready to use.&lt;/p&gt;
&lt;p&gt;You will notice that each handler notifies the saga that it was completed, sometimes passing back new information - such as the account ID.  It&#39;s perfectly possible to use the &lt;code&gt;IBus.Send*()&lt;/code&gt; methods to do that.  But, I&#39;m using  &lt;code&gt;IBus.Reply()&lt;/code&gt; which replies to the Rebus endpoint/queue that the message came from.  That is a nice way to avoid having to think about whether I&#39;ve configured the routing for that message!&lt;/p&gt;
&lt;p&gt;One of the joys of developing against the file system transport is that you can easily look into what Rebus is doing.  Just put a breakpoint in one of your handlers, use the API to start the onboarding process and you&#39;ll see the messages and saga state being updated on disk as you step through.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/saga-in-action-filesystem.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Congratulations!  If you&#39;ve followed this far, you now have a long-running, durable workflow implemented in Rebus!&lt;/p&gt;
&lt;p&gt;You can get this code at this point from the branch &lt;code&gt;6-saga-processes-messages&lt;/code&gt;.  I&#39;ve added some logging to that so that you can watch things happening from the console too, so you should see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/saga-logging-output.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; There are two versions of this post - one using C# and one using F#.  Just for fun, why not try running the API from the &lt;a href=&quot;https://github.com/seankearon/rebus-onboardingcs&quot;&gt;C# project&lt;/a&gt; and the backend from the &lt;a href=&quot;https://github.com/seankearon/rebus-onboardingfs&quot;&gt;F# project&lt;/a&gt;?  As long as you&#39;re using the same transport (at this stage that&#39;s file-system in &lt;code&gt;c:\rebus-advent&lt;/code&gt;) then everything will work just fine.  How lovely is that? :)&lt;/p&gt;
&lt;h2 id=&quot;adding-ola-support&quot;&gt;Adding OLA support &lt;a class=&quot;direct-link&quot; href=&quot;#adding-ola-support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Okay, so that&#39;s most of our requirements covered.  We only have the OLA to add in.  The requirement was that if the workflow does not complete within 10 minutes, the business want the following to happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any placed sales call is to be cancelled.&lt;/li&gt;
&lt;li&gt;The service desk takes over the process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To implement this, we&#39;re going to use a cool Rebus feature: deferred messages (which are talked about in the &lt;a href=&quot;https://github.com/rebus-org/Rebus/wiki/Timeout-Manager&quot;&gt;timeout manager section&lt;/a&gt; of the Rebus wiki).  Using this feature we can send ourselves a message that will be received at a time in the future.  If that message is received before the saga completes then we know that our time is up!  We send it like this:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Defer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TimeSpan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FromSeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;OnboardingOlaBreached&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;SagaId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we get that, we just handle it like any other message.  Here&#39;s the handler to meet our OLA breach requirements:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OnboardingOlaBreached&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SalesCallScheduled&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CancelSalesCall&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;AccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;NotifyServiceDesk&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Customer onboarding OLA breach pending for new customer &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; with email &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerEmail&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;MarkAsComplete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We send a message to cancel the sales call and then send another message to notify the service desk that bad things are about to happen!  After that, we call &lt;code&gt;MarkAsComplete()&lt;/code&gt; to close the saga.&lt;/p&gt;
&lt;p&gt;Don&#39;t forget that we need to set up a correlation for our timeout message and add the interface to the saga&#39;s signature:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CorrelateMessages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ICorrelationConfig&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// snip&lt;/span&gt;&lt;br&gt;    config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Correlate&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingOlaBreached&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SagaId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OnboardingSaga&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Saga&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingSagaData&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IAmInitiatedBy&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;CustomerAccountCreated&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;WelcomeEmailSent&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;SalesCallScheduled&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardingOlaBreached&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to add a couple of handlers that will respond to our new fire-and-forget messages.  As these are not responding, they are simpler creatures:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CancelSalesCallHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;CancelSalesCall&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CancelSalesCall&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Information&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Cancelling sales call for account &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CompletedTask&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NotifyServiceDeskHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;NotifyServiceDesk&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;NotifyServiceDesk&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Information&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Notifying the service desk that: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CompletedTask&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, we need to update the configuration spell to tell Rebus where to store timeouts.  We&#39;re going to store those in the file system for now:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddRebusAsSendAndReceive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IServiceCollection&lt;/span&gt; services&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddRebus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;        cfg &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; cfg&lt;br&gt;           &lt;span class=&quot;token comment&quot;&gt;// snip&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Timeouts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseFileSystem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c:/rebus-advent/timeouts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s all we need to meet the remaining requirements around the OLA and compensating actions.  In the code, we hard wired a 5-second timeout, so we can easily see the timeout in action by increasing the pretend delay in one of our handlers.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SendWelcomeEmailHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IHandleMessages&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;SendWelcomeEmail&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SendWelcomeEmail&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// This delay will breach our OLA rules!&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; _bus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;WelcomeEmailSent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccountId &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, when we run the saga we will see the delay causing the OLA to become breached and the compensating actions taking over.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/saga-logging-output-breached-ola.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The code at this point is in the branch &lt;code&gt;7-ola-and-compensating-actions&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;migrating-to-the-cloud&quot;&gt;Migrating to the Cloud &lt;a class=&quot;direct-link&quot; href=&quot;#migrating-to-the-cloud&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;What we have at this point will run in the IDE and can easily be installed as a Windows Service, as mentioned earlier.  All that remains now is to show how easy it is to migrate this to the cloud and run it in an Azure App Service.&lt;/p&gt;
&lt;p&gt;As we do this, you&#39;ll notice that all we change is the configuration and the functionality remains the same.  That&#39;s pretty awesome!  (Okay, sure, I&#39;ve added some code to get the .Net &lt;code&gt;IConfiguration&lt;/code&gt;, but that doesn&#39;t count. :) )&lt;/p&gt;
&lt;p&gt;We have two App Services that will host our entry point API and the back end processing system.  Instead of the file system, we will be using Azure Service Bus for our message transport and a SQL Azure database to store our saga state.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/azure-architecture.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you know, we&#39;re using  &lt;a href=&quot;https://github.com/rebus-org/Topper&quot;&gt;Topper&lt;/a&gt; so that we can easily run our Rebus back end in the Azure App Service as continuous Web Job.  This means we need to have the App Service configured as &lt;em&gt;always on&lt;/em&gt;.  We need to create a database for Rebus to use, but we&#39;re Rebus will create the tables if they don&#39;t already exist.  The same is true for the queues in our Azure Service Bus.  We need to change our configuration spells a little so that we can use these Azure resources.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; In my production systems, I like to control the configuration based on a value in &lt;code&gt;appsettings.json&lt;/code&gt;.  That means I always have my local file system transport set up and ready for any debugging I might want to do locally.&lt;/p&gt;
&lt;p&gt;We need to add the &lt;a href=&quot;https://www.nuget.org/packages/Rebus.AzureServiceBus&quot;&gt;Rebus.AzureServiceBus NuGet&lt;/a&gt; to our API and back end projects, and the &lt;a href=&quot;https://www.nuget.org/packages/Rebus.SqlServer&quot;&gt;Rebus.SqlServer&lt;/a&gt; to our back end project.  I&#39;m using a basic SQL Azure database that costs £3.72 per month.  That should be adequate until start onboarding a lot of customers!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; To avoid making our connections strings visible in our code, we&#39;re going to use .Net 5&#39;s built-in &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-5.0&amp;amp;tabs=windows&quot;&gt;secret management&lt;/a&gt;.  You could also just store those in your &lt;code&gt;appsettings.json&lt;/code&gt; while testing the code and not check them in!&lt;/p&gt;
&lt;p&gt;You can access your Azure Service Bus connection string from the &lt;strong&gt;Shared access policies&lt;/strong&gt; in the portal:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/azure-service-bus-connection-string.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; you can set your user secrets from the command line in the project folder: &lt;code&gt;dotnet user-secrets set &amp;quot;ConnectionStrings:MsSqlConnectionString&amp;quot; &amp;quot;you connection string&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the adjusted configuration spell for the back end:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddRebusAsSendAndReceive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IServiceCollection&lt;/span&gt; services&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IConfiguration&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddRebus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;        rebus &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; rebus&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Logging  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Serilog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Routing  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TypeBased&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;MapAssemblyOf&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MainQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Transport&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseAzureServiceBus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetConnectionString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AzureServiceBusConnectionString&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MainQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AutomaticallyRenewPeekLock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Options  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SimpleRetryStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token named-parameter punctuation&quot;&gt;errorQueueAddress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ErrorQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Options  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;EnableMessageAuditing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token named-parameter punctuation&quot;&gt;auditQueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AuditQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Sagas    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;StoreInSqlServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MsSqlConnectionString&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Sagas&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SagaIndexes&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;AutoRegisterHandlersFromAssemblyOf&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Backend&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that the &lt;code&gt;.Transport&lt;/code&gt; has changed to use Azure Service Bus (and that we allow Rebus to automatically renew peek locks on our behalf) and that the &lt;code&gt;.Sagas&lt;/code&gt; configuration now uses SQL Server.  If you&#39;re paying attention, you might have noticed that there is no longer an item to configure timeout storage.  That is because Rebus is using native behaviour in Azure Service Bus to achieve that (as it does with subscription storage, which is beyond the scope of this article). Nice!&lt;/p&gt;
&lt;p&gt;Just so we can see what&#39;s happened, we&#39;ve turned on message auditing using &lt;code&gt;.EnableMessageAuditing(...)&lt;/code&gt;.  Rebus will now put a copy of every processed message into the queue we nominate.&lt;/p&gt;
&lt;p&gt;The configuration spell for the API is adjusted similarly:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddRebusAsOneWayClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IServiceCollection&lt;/span&gt; services&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IConfiguration&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddRebus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;        rebus &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; rebus&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Logging&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Routing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TypeBased&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OnboardNewCustomer&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MainQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Transport&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseAzureServiceBusAsOneWayClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetConnectionString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AzureServiceBusConnectionString&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SimpleRetryStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token named-parameter punctuation&quot;&gt;errorQueueAddress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ErrorQueue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure that you update the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Azure.ServiceBus&quot;&gt;Microsoft.Azure.ServiceBus NuGet&lt;/a&gt; package to 5.0.0 or above or you might see an error like this when sending messages from the API:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Rebus.Exceptions.RebusApplicationException: Could not send to queue &#39;MainQueue&#39; ---&amp;gt; System.InvalidOperationException: Operation is not valid due to the current state of the object.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So, we can now run locally just the same as we before, but our messages will be stored in Azure Service Bus and sagas in SQL Azure (don&#39;t forget to allow access to SQL Azure from your local IP address!).  Run just the API and post to our &lt;code&gt;/newcustomer&lt;/code&gt; route and you will see there is a message in Azure Service Bus:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/azure-service-bus-message-peek.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Run the back end project and you will see in the console that Rebus has created tables and queues for us before processing the waiting message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/rebus-console-azure-backend-first-run.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;We now just need to publish our two projects and we&#39;ll have our onboarding process running in Azure.  Before you do that, you will need to set up your connection strings in your App Service:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/azure-app-service-configuration.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;To publish our backend processor as a Web Job we&#39;ll use Visual Studio (as Rider&#39;s Azure integration doesn&#39;t include Web Job support - but, hey, who knows what we might get for Xmas! :) ).  The process is pretty simple and you can create your App Services along the way if you want:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/visual-studio-publish.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Make sure you set your Web Job to be continuous when you publish:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/visual-studio-publish-ensure-continuous.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;After you&#39;ve published, check that your back end is working by looking in the Web Job section:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/azure-app-service-web-job-running.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If it&#39;s not running, click on logs to the output and diagnose.  Once it is running then you should be able to post to the &lt;code&gt;/newcustomer&lt;/code&gt; API and see the same output we saw in our console in the Web Job logs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/12/rebus-sagas-csharp/azure-web-job-log-processed.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Congratulations - you now have your onboarding business process running in an Azure App Service Web Job and your API entry point running in Azure App Service.&lt;/p&gt;
&lt;p&gt;The code at this point is in the branch &lt;code&gt;8-running-in-azure&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy Rebus!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Use PowerShell to create a SQL Azure firewall rule for your current IP</title>
		<link href="https://seankearon.me/posts/2020/11/using-powershell-to-set-sql-azure-firewall/"/>
		<updated>2020-11-20T00:00:00+00:00</updated>
		<id>https://seankearon.me/posts/2020/11/using-powershell-to-set-sql-azure-firewall/</id>
		<content type="html">&lt;p&gt;I often connect to my test SQL Azure database instance from my development machine.  To allow connections to the SQL Azure database there must be a rule for your IP address to allow the connection in the SQL Azure database&#39;s firewall.  When your IP changes you get an error saying that the connection could not be established.&lt;/p&gt;
&lt;p&gt;You can always use the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-sql/database/firewall-create-server-level-portal-quickstart&quot;&gt;Azure Portal&lt;/a&gt; to easily add a client IP rule at any time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seankearon.me/posts/2020/11/using-powershell-to-set-sql-azure-firewall/azure-portal-firewall-rules.png&quot; alt=&quot;&amp;quot;Azure portal firewall rules&amp;quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;But I find it faster and less distracting to add the firewall client IP rule by running a PowerShell script on my local machine (which I set up behind some keyboard shortcuts).  Here&#39;s how...&lt;/p&gt;
&lt;p&gt;Before we can run the script, we need to install the &lt;code&gt;Az&lt;/code&gt; and &lt;code&gt;Az.Sql&lt;/code&gt; modules, like so:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Install-Module&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name Az &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;AllowClobber &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Scope CurrentUser&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;Install-Module&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name Az&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Sql &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;AllowClobber &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Scope CurrentUser&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then need to connect to your Azure account, which is done without any pain by running this and following the prompts to log into your Azure account and authenticate your local PowerShell to connect.&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Connect-AzAccount&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you&#39;re set up, the script first creates a rule name based on your local username and computer name.  For me, this will be &lt;code&gt;sean-on-SEAN-XPS&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$ruleName&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$env&lt;/span&gt;:USERNAME-on-&lt;span class=&quot;token variable&quot;&gt;$env&lt;/span&gt;:COMPUTERNAME&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we find our current IP address using the wonderful &lt;a href=&quot;http://checkip.dyndns.org/&quot;&gt;http://checkip.dyndns.org/&lt;/a&gt;, which will give us a string something like:  &lt;code&gt;Current IP Address: 111.222.33.444&lt;/code&gt;.  We just split that to get the IP address:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$client&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;New-Object&lt;/span&gt; System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WebClient&lt;br&gt;&lt;span class=&quot;token namespace&quot;&gt;[xml]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$response&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DownloadString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://checkip.dyndns.org&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token variable&quot;&gt;$ip&lt;/span&gt; = &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;split &lt;span class=&quot;token string&quot;&gt;&#39;:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Trim&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a function called &lt;code&gt;Set-ServerAccess&lt;/code&gt; that does the real work, calling into the &lt;code&gt;Az.Sql&lt;/code&gt; module we loaded earlier and we remove any existing rules before adding a new one:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Set-ServerAccess&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$subscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$resourceGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$server&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token variable&quot;&gt;$context&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-AzSubscription&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;SubscriptionName &lt;span class=&quot;token variable&quot;&gt;$subscription&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;Set-AzContext&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$context&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;Remove-AzSqlServerFirewallRule&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ServerName &lt;span class=&quot;token variable&quot;&gt;$server&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ResourceGroupName &lt;span class=&quot;token variable&quot;&gt;$resourceGroup&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;FirewallRuleName &lt;span class=&quot;token variable&quot;&gt;$ruleName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ErrorAction SilentlyContinue&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;New-AzSqlServerFirewallRule&lt;/span&gt;    &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ServerName &lt;span class=&quot;token variable&quot;&gt;$server&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ResourceGroupName &lt;span class=&quot;token variable&quot;&gt;$resourceGroup&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;FirewallRuleName &lt;span class=&quot;token variable&quot;&gt;$ruleName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartIpAddress &lt;span class=&quot;token variable&quot;&gt;$ip&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;EndIpAddress &lt;span class=&quot;token variable&quot;&gt;$ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we just call this for the server you want to connect to.  Just add more lines like this to connect to more than one server:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Set-ServerAccess&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;your subscription name&#39;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;your resource group&#39;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;your sql azure server name&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s it, we&#39;re connected and back working again!  The full script is available from &lt;a href=&quot;https://gist.github.com/seankearon/b49ed2aee7363917a61f99689abccbdb&quot;&gt;this Gist&lt;/a&gt; and looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$ruleName&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$env&lt;/span&gt;:USERNAME-on-&lt;span class=&quot;token variable&quot;&gt;$env&lt;/span&gt;:COMPUTERNAME&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token variable&quot;&gt;$client&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;New-Object&lt;/span&gt; System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WebClient&lt;br&gt;&lt;span class=&quot;token namespace&quot;&gt;[xml]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$response&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DownloadString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://checkip.dyndns.org&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token variable&quot;&gt;$ip&lt;/span&gt; = &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;split &lt;span class=&quot;token string&quot;&gt;&#39;:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Trim&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Set-ServerAccess&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$subscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$resourceGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$server&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;Setting access rule for server &lt;span class=&quot;token variable&quot;&gt;$server&lt;/span&gt; in subscription &lt;span class=&quot;token variable&quot;&gt;$subscription&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Write-Host&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Out-Null&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token variable&quot;&gt;$context&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-AzSubscription&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;SubscriptionName &lt;span class=&quot;token variable&quot;&gt;$subscription&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;Set-AzContext&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$context&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;Remove-AzSqlServerFirewallRule&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ServerName &lt;span class=&quot;token variable&quot;&gt;$server&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ResourceGroupName &lt;span class=&quot;token variable&quot;&gt;$resourceGroup&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;FirewallRuleName &lt;span class=&quot;token variable&quot;&gt;$ruleName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ErrorAction SilentlyContinue&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;New-AzSqlServerFirewallRule&lt;/span&gt;    &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ServerName &lt;span class=&quot;token variable&quot;&gt;$server&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ResourceGroupName &lt;span class=&quot;token variable&quot;&gt;$resourceGroup&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;FirewallRuleName &lt;span class=&quot;token variable&quot;&gt;$ruleName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartIpAddress &lt;span class=&quot;token variable&quot;&gt;$ip&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;EndIpAddress &lt;span class=&quot;token variable&quot;&gt;$ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;Set-ServerAccess&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;your subscription name&#39;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;your resource group&#39;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;your sql azure server name&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
	</entry>
</feed>
